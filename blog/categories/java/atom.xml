<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: java | 吴文洁]]></title>
  <link href="http://www.wuwenjie.tk/blog/categories/java/atom.xml" rel="self"/>
  <link href="http://www.wuwenjie.tk/"/>
  <updated>2015-10-05T17:18:06+08:00</updated>
  <id>http://www.wuwenjie.tk/</id>
  <author>
    <name><![CDATA[wuwenjie]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[解决android sdk manager更新--使用JAVA SOCK代理选项]]></title>
    <link href="http://www.wuwenjie.tk/blog/2015/09/30/jie-jue-android-sdk-managergeng-xin-shi-yong-java-sockdai-li-xuan-xiang/"/>
    <updated>2015-09-30T15:43:00+08:00</updated>
    <id>http://www.wuwenjie.tk/blog/2015/09/30/jie-jue-android-sdk-managergeng-xin-shi-yong-java-sockdai-li-xuan-xiang</id>
    <content type="html"><![CDATA[<h3>前言</h3>

<ul>
<li>我国一直努力地去做互联网的强国。<a href="http://news.xinhuanet.com/politics/2014-02/27/c_119538788.htm">1</a></li>
<li>android sdk manager 无法正常更新，国情如此。</li>
<li>android开发者急需新版的SDK，以跟上时代。</li>
</ul>


<h3>普通方法</h3>

<ul>
<li>普遍的方法是改SDK manager的http proxy。</li>
<li>之前用过几个地址，效果不佳，大概是失效了。</li>
</ul>


<h3>我的解决方法</h3>

<ul>
<li>以linux版为例</li>
<li>启动sdk manager 其实是执行<strong>SDK目录下/tools/android</strong>。</li>
<li>它其实是一个可执行的shell脚本。</li>
</ul>


<!-- more -->


<ul>
<li>最为重要的是脚本的最后一段，添加<a href="http://docs.oracle.com/javase/7/docs/technotes/guides/net/properties.html">java socket代理选项</a>即可。</li>
<li>启动执行之后即可进行使用了。</li>
<li>注：你必需有科学上网的工具，并能正确链接。</li>
</ul>


<h3>shell修改如下(android 文件)</h3>

<p>```bash
exec &ldquo;$java_cmd&rdquo; \</p>

<pre><code>-Xmx256M $os_opts $java_debug \
-Dcom.android.sdkmanager.toolsdir="$progdir" \
-DsocksProxyHost="127.0.0.1" \
-DsocksProxyPort="7070" \
-classpath "$jarpath:$swtpath/swt.jar" \
com.android.sdkmanager.Main "$@"
</code></pre>

<p>```</p>

<ul>
<li>socksProxyHost socket代理服务器地址。</li>
<li>socksProxyPort socket代理端口。</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[改]Java Native Interface 播放MP3 ]]></title>
    <link href="http://www.wuwenjie.tk/blog/2015/02/28/gai-java-native-interface-bo-fang-mp3/"/>
    <updated>2015-02-28T14:32:00+08:00</updated>
    <id>http://www.wuwenjie.tk/blog/2015/02/28/gai-java-native-interface-bo-fang-mp3</id>
    <content type="html"><![CDATA[<h1>前言与背景</h1>

<ul>
<li>JAVA对多媒体的处理能力较弱，但JNI给了我们一扇逃生门（"escape hatch"）</li>
<li><a href="http://zh.wikipedia.org/wiki/Java%E6%9C%AC%E5%9C%B0%E6%8E%A5%E5%8F%A3">JNI</a>提供给Java调用C语言、C++或被C、C++调用的功能</li>
<li>使得JAVA可以使用丰富的C、C++库，而且本地方法使程序运行更快</li>
</ul>


<h1>如何播放MP3呢？</h1>

<ul>
<li>利用JNI调用著名的<a href="http://zh.wikipedia.org/wiki/GStreamer">GStreamer</a>流式多媒体框架进行播放。</li>
<li>它采用插件（plugin）和管道（pipeline）的体系结构，可以像搭积木一样简单地创建多媒体应用。</li>
<li>并且GStreamer提供众多插件，易于扩展，以后可以考虑用Java播放视频。</li>
</ul>


<!-- more -->


<h1>在debain系下安装GStreamer</h1>

<ul>
<li>sudo apt-get install libgstreamer0.10-0 libgstreamer0.10-dev libgstreamer0.10-0-dbg</li>
<li>sudo apt-get install gstreamer0.10-plugins-ugly

<ul>
<li> 使用mad解码器插件安装该包</li>
</ul>
</li>
</ul>


<h1>CODE</h1>

<h3>1.先编写好JAVA代码，Jaudio.java</h3>

<p>```java
// javac Jaudio.java
// javah -jni Jaudio
// java -Djava.library.path=. Jaudio</p>

<p>public class Jaudio{</p>

<pre><code>// JNI 调用的方法
public native void playMP3(String url);

static{
    System.loadLibrary("Jaudio"); //加载库
}

public void play(String url){

    playMP3(url);

}

// java方法可供JNI调用
public static long nanoTime(){

    return System.nanoTime();

}

public static void main(String[] args){

    System.out.println("Wellcom to Jaudio! v0.0.1 20150211");

    //System.out.println(nanoTime());

    Jaudio audio = new Jaudio();
    audio.play(args[0]);

}
</code></pre>

<p>}
```</p>

<h3>2.javac Jaudio.java编译</h3>

<h3>3.利用 javah -jni Jaudio 生成Jaudio.h头文件</h3>

<h3>4.使用gcc编译Jaudio.c</h3>

<ul>
<li>编译命令，注：/usr/lib/jvm/java-1.7.0-openjdk-i386/include 为 jni.h路径
<code>text
gcc -fPIC -shared -static Jaudio.c -o libJaudio.so \
-I /usr/lib/jvm/java-1.7.0-openjdk-i386/include \
$(pkg-config --cflags --libs gstreamer-0.10)
</code></li>
<li>Jaudio.c
```c

<h1>include &lt;stdio.h></h1>

<h1>include &lt;jni.h></h1></li>
</ul>


<h1>include &lt;gst/gst.h></h1>

<h1>include &ldquo;Jaudio.h&rdquo;</h1>

<p>// gcc -fPIC -shared -static Jaudio.c -o libJaudio.so \
-I /usr/lib/jvm/java-1.7.0-openjdk-i386/include \
$(pkg-config &mdash;cflags &mdash;libs gstreamer-0.10)</p>

<p>/<em>
 * symbol lookup error: libJaudio.so: undefined symbol: gst_init
 * gcc参数顺序相关的问题 <a href="http://m.oschina.net/blog/97611">http://m.oschina.net/blog/97611</a>
 * 对于C/C++编译而言，读取编译选项是按照从左到右的顺序执行的 。当编译器遇到源文件时，
 * 开始对源文件中用到的函数进行解析，找到相对应函数实现（Definition of Function）。
 * 过程是按照先遇到不能解析的函数（unresolved function），
 * 然后在源文件选项后面的一些选项中寻找可能的函数体的信息，是这样的一个顺序进行的。
 * 包含函数体或者函数定义信息的编译选项出现在源文件之前，当编译器遇到不能解析的函数时，
 * 在源文件之后的选项中寻找相关的信息，也就是无法找到相关的函数定义。
 </em>/</p>

<p>// java -Djava.library.path=. Jaudio</p>

<p>//定义消息处理函数
static gboolean bus_call(GstBus <em>bus,GstMessage </em>msg,gpointer data){</p>

<pre><code>GMainLoop *loop = (GMainLoop *) data;
//这个是主循环的指针，在接受EOS消息时退出循环
gchar *debug;
GError *error;

switch (GST_MESSAGE_TYPE(msg)){
    case GST_MESSAGE_EOS:

        g_print("播放结束\n");
        g_main_loop_quit(loop);
        //退出循环
        break;
    case GST_MESSAGE_ERROR:

        gst_message_parse_error(msg,&amp;error,&amp;debug);
        g_free(debug);
        g_printerr("错误:%s\n",error-&gt;message);
        g_error_free(error);
        g_main_loop_quit(loop);
        break;
    default:
         break;
}
return TRUE;
</code></pre>

<p>}</p>

<p>JNIEXPORT void JNICALL Java_Jaudio_playMP3(JNIEnv *env, jobject this,</p>

<pre><code>    jstring jstr){

/*
 * 所有的 JNI 调用都使用了 JNIEnv * 类型的指针，
 * 习惯上在 CPP 文件中将这个变量定义为 evn，它是任意一个本地方法的第一个参数。
 * env 指针指向一个函数指针表，在 VC 中可以直接用"-&gt;"操作符访问其中的函数。
 * object指向在此Java中实例化的对象 LocalFunction 的句柄，相当于this指针。
 */
const char* str;
str = (*env)-&gt;GetStringUTFChars(env,jstr, JNI_FALSE);
// 从 jstr 字符串取得指向字符串 UTF 编码的指针
printf("播放地址：%s\n",str); 

jclass cls = (*env)-&gt;FindClass(env, "Jaudio");
if(cls != 0){
    //printf("FindClass:%p\n",cls);
    jmethodID mid = 
        (*env)-&gt;GetStaticMethodID(env, cls, "nanoTime", "()J");

    if(mid != 0){

        //printf("GetMethodID:%p\n",mid);
        jlong jl = (*env)-&gt;CallStaticLongMethod(env,cls,mid);
        long long l = jl;
        printf("Java nanoTime：%lld\n",l);//long jlong signed 64bits

    }else{
        printf("GetMethodID err\n");
    }
}else{
    printf("FindClass err\n");
}

GMainLoop *loop;
GstElement *pipeline,*source,*decoder,*sink;//定义组件
GstBus *bus;

const gchar *nano_str;
guint major, minor, micro, nano;

gst_init(NULL,NULL);    //初始化
loop = g_main_loop_new(NULL,FALSE);
//创建主循环，在执行 g_main_loop_run后正式开始循环

gst_version (&amp;major, &amp;minor, &amp;micro, &amp;nano);
if (nano == 1) nano_str = "(CVS)";
else if (nano == 2) nano_str = "(Prerelease)";
else nano_str = "";
printf("Power By\n\tJava Native Interface &amp; GStreamer%d.%d.%d %s\n",
        major, minor, micro, nano_str);
printf("\tJaudio.c v0.0.1 20150211\n");

//创建管道和组件
//创建用来容纳元件的新管道，管道是一个特殊的组件，可以更好的让数据流动
pipeline = gst_pipeline_new("audio-player");

//生成用于读取硬盘数据的元件
source = gst_element_factory_make("filesrc","file-source");

//创建解码器元件
decoder = gst_element_factory_make("mad","mad-decoder");

//创建音频回放元件
sink = gst_element_factory_make("autoaudiosink","audio-output");

/*if(!pipeline||!source||!decoder||!sink){
    g_printerr("One element could not be created.Exiting.\n");
    return -1;
}*/
if(!pipeline){
    g_printerr("GST管道不能创建!\n");
    exit(-1);
}
if(!source){
    g_printerr("GST播放文件不能创建!\n");
    exit(-1);
}
if(!decoder){
    g_printerr("GST解码元件不能创建\n");
    exit(-1);
}
if(!decoder){
    g_printerr("GST音频输出不能创建\n");
    exit(-1);
}

//设置 source的location 参数 文件地址.
g_object_set(G_OBJECT(source),"location",str,NULL);

//把组件添加到管道中
gst_bin_add_many(GST_BIN(pipeline),source,decoder,sink,NULL);

//依次连接组件
gst_element_link_many(source,decoder,sink,NULL);

//得到 管道的消息总线
bus = gst_pipeline_get_bus(GST_PIPELINE(pipeline));

//添加消息监视器
gst_bus_add_watch(bus,bus_call,loop);
gst_object_unref(bus);

//开始播放
gst_element_set_state(pipeline,GST_STATE_PLAYING);
g_print("开始播放 -&gt; %s\n",str);

//开始循环
g_main_loop_run(loop);

//停止管道处理流程
gst_element_set_state(pipeline,GST_STATE_NULL);
//释放占用的资源
gst_object_unref(GST_OBJECT(pipeline));

g_print("拜拜，退出\n");
//return 0;

(*env)-&gt;ReleaseStringUTFChars(env,jstr, (const char *)str ); 
// 通知虚拟机本地代码不再需要通过 str 访问 Java 字符串。
</code></pre>

<p>}
```</p>

<h3>运行Jaudio</h3>

<ul>
<li>如果共享库libJaudio.so与Jaudio.class在同一目录下，可省略“-Djava.library.path=”选项
<code>text
java -Djava.library.path=.  Jaudio "a.mp3"
</code></li>
</ul>


<h2>结束语</h2>

<ul>
<li>JNI是强大的给Java带来了活力与生命力。</li>
<li>Android上很多app也使用类JNI技术，被称为<a href="https://developer.android.com/tools/sdk/ndk/index.html">NDK</a>,用于业务加密、高效处理等方面。</li>
<li>Gstreamer 也提供多个平台的<a href="http://docs.gstreamer.com/display/GstSDK/Android+tutorials">SDK</a>，最感兴趣的是android平台的，可以试一试。</li>
<li><a href="https://code.google.com/p/gstreamer-java/">gstreamer-java</a>项目是一个成熟的利用JNI的Gst项目，可以使用、参考。</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[用知网简单查找论文信息]]></title>
    <link href="http://www.wuwenjie.tk/blog/2014/06/30/yong-zhi-wang-jian-dan-cha-zhao-lun-wen-xin-xi/"/>
    <updated>2014-06-30T17:50:00+08:00</updated>
    <id>http://www.wuwenjie.tk/blog/2014/06/30/yong-zhi-wang-jian-dan-cha-zhao-lun-wen-xin-xi</id>
    <content type="html"><![CDATA[<!-- more -->


<h1>功能</h1>

<ul>
<li>通过用户输入的关键词查找相关论文信息</li>
<li>利用<a href="http://www.cnki.com.cn/">CNKI</a>知网的多个学位论文数据库，查找论文</li>
<li>返回与关键词相似的论文信息包括：

<ul>
<li>相似的论文题目</li>
<li>作者信息</li>
<li>论文性质</li>
<li>论文来源</li>
<li>论文发表时间</li>
<li>论文下载次数</li>
<li>论文相似句子</li>
</ul>
</li>
</ul>


<h1>使用</h1>

<ul>
<li>编译
<code>bash
  javac GETcnki.java
</code></li>
<li>执行
<code>bash
  java GETcnki 内幕交易 实证分析 "Rezaul Kabir" 阿姆斯特丹
</code></li>
<li>效果
```text
正在通过CNKI查找内容相似的论文。。。
关键词：内幕交易 实证分析 Rezaul Kabir 阿姆斯特丹</li>
</ul>


<p>0:股票市场失灵与政府行为选择  宋玉臣 博士
吉林大学 2006-10-01 下载频次:1311
句子1：其次，实证分析方面，对宏观内幕交易和微观内幕交易分别进行了实证研究。
句子2：Rezaul Kabir和Theo Vermaelen（1996）对荷兰阿姆斯特丹股票市场进行的实证分析，通过检验年报公布前两个月的股票流动性来检验内幕交易对股票价格的影响，结论是认为该市场存在内幕交易并支持政府限制内幕交易；</p>

<p>1:我国股票市场内幕交易的实证研究  刘晓明 硕士
暨南大学 2008-05-01 下载频次:597
句子1：暨南大学硕士论文我国股票市场内幕交易的实证研究5内幕交易案例分析及原因分析按内幕交易的主体，可以将内幕人分为证券内幕信息的知情人员(第一内幕人)，从内幕信息知情人员获得内幕信息的第二内幕人和非法获取内幕信息的人。
句子2：李心丹(2007)通过建立内幕交易行为动机结构模型，实证分析了影响内幕交易行为发生的多种因素，指出高额的期望收益和跟风攀比心态的存在极大的强化了内幕交易主体从事内幕交易的倾向，而实施内幕交易引发的内疚感、导致社会声誉的受损、被查处的力度和被惩罚的力度，特别是查处力度与惩罚力度，在相当程度上弱化了内幕主体实施内幕交易的行为倾向。</p>

<p>2:股票市场内幕交易及量价波动的实证研究  陈婧 硕士
南京理工大学 2007-06-01 下载频次:535
句子1：Rezaul Kabir和Theovermaelen(1996)对荷兰阿姆斯特丹股票市场进行的实证分析，通过检验禁止内幕交易后股票流动性来检验其对股票市场的影响，发现限制内幕交易减少了股票的流动性(用交易量衡量流动性)，同时还发现市南京理工大学硕士学位论文股票市场内幕交易及量价波动的实证研究场对利好消息的反应速度减慢。
句子2：8.3进一步研究方向尽管本文对内幕交易进行了比较全面、细致的实证分析，但是有关内幕交易的研究仍然有待深入。</p>

<p>3:我国证券市场内幕交易对投资者利益影响的实证分析  张宇 硕士
西南大学 2011-04-05 下载频次:240
句子1：西南大学硕士学位论文第5章内幕交易实证分析第5章内幕交易实证分析上一章已经大致介绍了运用事件研究法的步骤，本章就以西南证券(印0369)为例，进行实验研究分析。
句子2：Theovermaelen(1996)对荷兰阿姆斯特丹股票市场进行了股票流动性与内幕交易的关系进行了实证分析，通过检验禁_l卜内幕交易后股票流动性来检验其对股票市场的影响发现，当内幕交易被限制了股票的流动性减少了，此时市场对利好消息的反应速度也减慢。          <br/>
```</p>

<h1>java 代码</h1>

<ul>
<li>说明：主要是要保存第一次的<a href="https://zh.wikipedia.org/wiki/%E8%B6%85%E6%96%87%E6%9C%AC%E4%BC%A0%E8%BE%93%E5%8D%8F%E8%AE%AE">GET请求</a>的<a href="http://zh.wikipedia.org/wiki/Cookie">COOKIES</a>，用于设置于第二个GET请求
```java
import java.io.BufferedReader;
import java.io.DataOutputStream;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.UnsupportedEncodingException;</li>
</ul>


<p>import java.lang.Integer;</p>

<p>import java.net.HttpURLConnection;
import java.net.URL;
import java.net.URLEncoder;</p>

<p>import java.util.ArrayList;
import java.util.List;
import java.util.regex.Matcher;
import java.util.regex.Pattern;</p>

<p>public class GETcnki {</p>

<pre><code>public static void readContentFromGet(String GET_URL) {
    String lines;
    URL cnkiURL = null;

    try {
        cnkiURL = new URL(GET_URL);
    } catch (java.net.MalformedURLException e) {
        e.printStackTrace();
        readContentFromGet(GET_URL);
    }

    List&lt;String&gt; cookies = null;
    StringBuffer response = new StringBuffer();

    // 打开连接，URL.openConnection函数会根据URL的类型，
    // 返回不同的URLConnection子类的对象，URL是http,返回HttpURLConnection
    try {
        HttpURLConnection connection = (HttpURLConnection) cnkiURL.openConnection();

        connection.setRequestProperty("User-Agent",
            "Mozilla/5.0 (X11; Ubuntu; Linux i686; rv:29.0) Gecko/20100101 Firefox/29.0");
        connection.connect();
        /*
        String headerName = null;
        for (int i = 1; (headerName = connection.getHeaderFieldKey(i)) != null;
                i++) {
            System.out.println(headerName + ":" + connection.getHeaderField(i));
        }
        */
        cookies = connection.getHeaderFields().get("Set-Cookie");

        BufferedReader reader = new BufferedReader(new InputStreamReader(
                    connection.getInputStream(), "utf-8"));

        while ((lines = reader.readLine()) != null) {
            response.append(lines);
        }

        reader.close();
        connection.disconnect();

        //System.out.println("----------\n"+response);
    } catch (java.io.IOException e) {
        e.printStackTrace();
        readContentFromGet(GET_URL);
    }

    //---------------------------
    URL cnkiURL2 = null;

    try {
        cnkiURL2 = new URL(
                "http://epub.cnki.net/KNS/brief/brief.aspx?pagename=" +
                response.toString());
    } catch (java.net.MalformedURLException e) {
        e.printStackTrace();
        readContentFromGet(GET_URL);
    }

    StringBuffer response2 = new StringBuffer();

    try {
        HttpURLConnection con = (HttpURLConnection) cnkiURL2.openConnection();

        con.setRequestProperty("User-Agent",
            "Mozilla/5.0 (X11; Ubuntu; Linux i686; rv:29.0) Gecko/20100101 Firefox/29.0");
        con.setRequestProperty("Referer",
            "http://epub.cnki.net/KNS/brief/result.aspx?dbprefix=CDMD");

        String newcookies = "";

        for (String cookie : cookies) {
            newcookies += (cookie.substring(0, cookie.indexOf(";")) + ";");
        }

        //System.out.println("newcookies:" + newcookies);
        //ASP.NET_SessionId=oaxxoh3bazgbhcuei5aharzk; LID=; SID_kns=120113
        con.addRequestProperty("Cookie", newcookies);
        /*
        for (String header : con.getRequestProperties().keySet()) {
        if (header != null) {
        for (String value : con.getRequestProperties().get(header)) {
            System.out.println(header + ":" + value);
        }
        }
        }
        */
        con.connect();

        BufferedReader reader2 = new BufferedReader(new InputStreamReader(
                    con.getInputStream(), "utf-8"));

        while ((lines = reader2.readLine()) != null) {
            response2.append(lines);
        }

        reader2.close();
        con.disconnect();

    } catch (java.io.IOException e) {
        e.printStackTrace();
        readContentFromGet(GET_URL);
    }

    String info = response2.toString();

    //句子&amp;nbsp;1([\s\S]+?)句子来
    List&lt;String&gt; sentences = GETcnki.StrMatch(info,
            "句子&amp;nbsp;1([\\s\\S]+?)句子来");

    for(int i =0;i&lt;sentences.size();i++){
        //去除标签
        sentences.set(i,sentences.get(i).replaceAll("&lt;[^&gt;]*&gt;",""));

        //分段
        Matcher mat = 
            Pattern.compile("句子&amp;nbsp;").matcher(sentences.get(i));
        while (mat.find())
            sentences.set(i,
                sentences.get(i).replaceAll("句子&amp;nbsp;","\n句子"));

        sentences.set(i,"句子1"+sentences.get(i));

    }

    int i = 0;
    //har\('(.+?)'
    List&lt;String&gt; titles = GETcnki.StrMatch(info, "har\\('(.+?)'");
    //作者.+?"&gt;(.+?)&lt;
    List&lt;String&gt; auhtors = GETcnki.StrMatch(info, "作者.+?\"&gt;(.+?)&lt;");
    //文献来源.+?"&gt;(.+?)&lt;
    List&lt;String&gt; literatures = GETcnki.StrMatch(info, "文献来源.+?\"&gt;(.+?)&lt;");
    //en.{2}发表时间.+?&gt;(.+?\b)&lt;
    List&lt;String&gt; dates = GETcnki.StrMatch(info, "en.{2}发表时间.+?&gt;(.+?\\b)&lt;");
    //下载频次.+?&gt;([\d]*)
    List&lt;String&gt; downloadfrequencys =
                    GETcnki.StrMatch(info,"下载频次.+?&gt;([\\d]*)");
    //来源库.+?&gt;(.+?)[\s]+?&lt;
    List&lt;String&gt; databases =
                    GETcnki.StrMatch(info,"来源库.+?&gt;(.+?)[\\s]+?&lt;");

     for(i =0;i&lt;sentences.size();i++){
         System.out.println(i + ":" + titles.get(i)
            +"  "+auhtors.get(i)+" "+databases.get(i)
            +"\n"+literatures.get(i)+" "+dates.get(i)
            +" 下载频次:"+downloadfrequencys.get(i)+"\n"+sentences.get(i)+"\n");
     }
}

public static List&lt;String&gt; StrMatch(String raw, String regex) {
    List&lt;String&gt; result = new ArrayList&lt;String&gt;();

    Pattern pat = Pattern.compile(regex);
    Matcher mat = pat.matcher(raw);

    if (mat.find()) {
        //System.out.println("---\n"+mat.group(1)+"---\n");
        result.add(mat.group(1));

        while (mat.find())
            //System.out.println("---\n"+mat.group(1)+"---\n");
            //捕获组是从 1 开始从左到右的索引
            result.add(mat.group(1));
    } else {
        return result;
    }

    return result;
}

public static String encodeURIComponent(String component) {
    String result = null;

    try {
        result = URLEncoder.encode(component, "UTF-8")
                           .replaceAll("\\%28", "(").replaceAll("\\%29", ")")
                           .replaceAll("\\+", "%20").replaceAll("\\%27", "'")
                           .replaceAll("\\%21", "!").replaceAll("\\%7E", "~");
    } catch (UnsupportedEncodingException e) {
        result = component;
    }

    return result;
}

public static void main(String[] args) {

    String[] s={"","","",""};
    System.out.print("正在通过CNKI查找内容相似的论文。。。\n关键词：");

    if(args.length != 4){
        System.err.println("请输入四个字符串!");
        return ;
    }

    for(int i =0 ;i&lt;args.length;i++){
        if(args[i].length() == 0 ){
            System.err.println("\n请不要输入空字符串!");
            return ;
        }
        s[i] = encodeURIComponent(args[i]);
        System.out.print(args[i]+" ");
    }
    System.out.println("\n");

    String GET_URL = "http://epub.cnki.net/KNS/request/SearchHandler.ashx?" +
        "action=&amp;NaviCode=*&amp;ua=1.21&amp;PageName=ASP.brief_result_aspx&amp;DbPrefix=CDMD" +
        "&amp;DbCatalog=中国优秀博硕士学位论文全文数据库" + "&amp;ConfigFile=CDMD.xml" +
        "&amp;db_opt=中国优秀博硕士学位论文全文数据库" +
        "&amp;db_value=中国博士学位论文全文数据库,中国优秀硕士学位论文全文数据库" +
        "&amp;sen_1_sel=%2FNEAR%2020&amp;sen_1_value1=" + s[0] + "&amp;sen_1_value2=" +
        s[1] + "&amp;sen_2_sel=%2FSEN%2020&amp;sen_2_value1=" + s[2] +
        "&amp;sen_2_value2=" + s[3] + "&amp;sen_2_logical=and" +
        "&amp;his=0&amp;issen=1&amp;__=Mon%20Jun%2009%202014%2022%3A15%3A59%20GMT%2B0800%20(CST)";

    /*ConfigFile        CDMD.xml
    DbCatalog        中国优秀博硕士学位论文全文数据库
    DbPrefix        CDMD
    NaviCode        *
    PageName        ASP.brief_result_aspx
    __        Tue Jun 10 2014 12:08:21 GMT+0800 (CST)
    action
    db_opt        中国优秀博硕士学位论文全文数据库
    db_value        中国博士学位论文全文数据库,中国优秀硕士学位论文全文数据库
    his        0
    issen        1
    sen_1_sel        /NEAR 20
    sen_1_value1        信息
    sen_1_value2        某种程度
    sen_2_logical        and
    sen_2_sel        /SEN 20
    sen_2_value1        证券市场
    sen_2_value2        最具敏感性
    ua        1.21
    */
    GETcnki gs = new GETcnki();

    gs.readContentFromGet(GET_URL);
}
</code></pre>

<p>}</p>

<p>```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[android APP 古汉语常用字字典]]></title>
    <link href="http://www.wuwenjie.tk/blog/2014/02/14/android-app-gu-yi-yu-chang-yong-zi-zi-dian/"/>
    <updated>2014-02-14T00:15:00+08:00</updated>
    <id>http://www.wuwenjie.tk/blog/2014/02/14/android-app-gu-yi-yu-chang-yong-zi-zi-dian</id>
    <content type="html"><![CDATA[<h2>为什么有它</h2>

<ul>
<li>之前在做<a href="/blog/2013/09/06/hello-luence-ben-di-wen-ben-cha-zhao-yin-qing-de-ge-shi-li-lucene-plus-nodejs/">hello_luence</a>的时候，在网络上寻找文本类的文档做【被索引的文档】，得到字典文件</li>
<li> 后来在看<a href="http://lib.ecit.edu.cn/guoxue/%E5%8F%B2%E9%83%A8/25%E5%8F%B2/%E9%9A%8B%E4%B9%A6/081.htm">隋书-东夷传</a>等时，有很多字不认识，不清楚意思，可以拿它做工具</li>
<li>可以给别人用，离线的，有字典文件</li>
</ul>


<!-- more -->


<h2>它的样子</h2>

<ul>
<li>图标：商务印书馆 1998版 古汉语常用字字典 的<a href="http://img3.douban.com/lpic/s1856695.jpg">封面</a></li>
<li>很亲切，大概初中时别人送我的就是这样的</li>
<li>这也促使我对古汉语有了兴趣，但之后没有以前看得多了</li>
<li>截图

<ul>
<li><img src="/images/Old_Chinese_Character_Dictionary_0.png" alt="Old_Chinese_Character_Dictionary" /></li>
<li><img src="/images/Old_Chinese_Character_Dictionary_1.png" alt="Old_Chinese_Character_Dictionary" /></li>
</ul>
</li>
</ul>


<h2>它的不足</h2>

<ul>
<li>字典的内容比较老</li>
<li>使用<a href="http://developer.android.com/guide/topics/search/index.html">android search SearchView</a>的功能，但未完善</li>
</ul>


<h2>它在哪里</h2>

<ul>
<li> <a href="/archive/app/Old_Chinese_Character_Dictionary.apk">下载</a>：md5sum:bd0316cec74ad8849f59b859af7cd220</li>
<li> 备注：所有资源来自网络</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hello_luence 本地文本查找引擎的一个实例 Lucene+nodejs 2]]></title>
    <link href="http://www.wuwenjie.tk/blog/2013/10/06/hello-luence-ben-di-wen-ben-cha-zhao-yin-qing-de-yi-ge-shi-li-lucene-plus-nodejs-2/"/>
    <updated>2013-10-06T22:09:00+08:00</updated>
    <id>http://www.wuwenjie.tk/blog/2013/10/06/hello-luence-ben-di-wen-ben-cha-zhao-yin-qing-de-yi-ge-shi-li-lucene-plus-nodejs-2</id>
    <content type="html"><![CDATA[<h2>hello_luence 本地文本查找引擎的一个实例 lucene+nodejs 2</h2>

<h3>接着<a href="http://wuwenjie.tk/blog/2013/09/06/hello-luence-ben-di-wen-ben-cha-zhao-yin-qing-de-ge-shi-li-lucene-plus-nodejs/">之前的文章</a></h3>

<ul>
<li>为了更好地使用luence搜索，我使用了nodejs 简单的建构了一个http服务端</li>
<li>我主要参考了以下两篇文章，来写出一个nodejs的服务端</li>
</ul>


<!-- more -->


<ul>
<li><a href="http://www.nodebeginner.org/index-zh-cn.html">Node入门</a></li>
<li><a href="http://cnodejs.org/topic/4f16442ccae1f4aa27001071">用NodeJS打造你的静态文件服务器</a></li>
<li>nodejs 事件驱动的编程方式，与传统的编程思维，线性方式不一样，是值得注意的</li>
<li>nodejs 有很好的<a href="http://www.nodejs.org/api/">API</a>，适合于开发web程序，方便、小巧、轻快</li>
<li>两个比较好的http服务器例子</li>
<li><a href="https://github.com/leapon/smallweb">smallweb</a> : A light-weight web server</li>
<li><a href="https://github.com/JacksonTian/ping">ping</a> : 基于Node的Web开发框架</li>
</ul>


<h3>Show me the code</h3>

<ul>
<li><a href="https://github.com/wuwenjie1992/hello_luence"><code>hello_luence</code></a></li>
<li>现在的样子</li>
<li><img src="/images/hello_lucene_2.png" alt="hello_lucene_2" /></li>
</ul>

]]></content>
  </entry>
  
</feed>
