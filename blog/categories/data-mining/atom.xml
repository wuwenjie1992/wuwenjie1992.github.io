<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Data mining | 吴文洁]]></title>
  <link href="http://www.wuwenjie.tk/blog/categories/data-mining/atom.xml" rel="self"/>
  <link href="http://www.wuwenjie.tk/"/>
  <updated>2016-04-06T22:28:09+08:00</updated>
  <id>http://www.wuwenjie.tk/</id>
  <author>
    <name><![CDATA[wuwenjie]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[改-TextRank文本关键字提取简介与应用]]></title>
    <link href="http://www.wuwenjie.tk/blog/2016/02/06/gai-textrankwen-ben-guan-jian-zi-ti-qu-jian-jie-yu-ying-yong/"/>
    <updated>2016-02-06T21:03:00+08:00</updated>
    <id>http://www.wuwenjie.tk/blog/2016/02/06/gai-textrankwen-ben-guan-jian-zi-ti-qu-jian-jie-yu-ying-yong</id>
    <content type="html"><![CDATA[<h2>TextRank与PageRank</h2>

<ul>
<li>TextRank脱胎于PageRank，受其启发应用于文本处理。<a href="https://web.eecs.umich.edu/~mihalcea/papers/mihalcea.emnlp04.pdf">&ndash;>论文</a></li>
<li>TextRank在PageRank的基础上，引入了边的权值概念，代表两个句子的相似度。</li>
<li>PageRank 公式</li>
<li><img src="/images/pagerank.png" alt="pagerank" /></li>
<li>TextRank 公式</li>
<li><img src="/images/textrank.png" alt="textrank" /></li>
<li><a href="http://www.cnblogs.com/chenbjin/p/4600538.html">公式解释</a></li>
<li>模型描述了一个有向有权图 G =(V, E), 由点集合V和边集合E组成</li>
<li>图中任两点 Vi , Vj 之间边的权重为 wji</li>
<li>对于一个给定的点Vi, In(Vi)为指向该点的点集合, Out(Vi)为点Vi指向的点集合</li>
<li>d为阻尼系数,代表从图中某一特定点指向其他任意点的概率,一般取值为0.85</li>
</ul>


<!-- more -->


<h2>关键字提取</h2>

<ul>
<li>单词构成的边的权重变为0（没有相似性），<a href="http://www.hankcs.com/nlp/textrank-algorithm-to-extract-the-keywords-java-implementation.html">权值约掉</a>，算法退化为PageRank</li>
<li>大致步骤：</li>
<li>分词。</li>
<li>按预定窗口大小，依次划分单词。</li>
<li>计算公式，迭代、直至收敛。</li>
<li>对结果倒序排序，得到最重要关键词。</li>
</ul>


<h2>java实现参考</h2>

<ul>
<li>参考hankcs的实现，<a href="https://github.com/hankcs/TextRank/blob/master/src/main/java/com/hankcs/textrank/TextRankKeyword.java">github</a></li>
<li>改用smartcn进行分词</li>
<li>算法关键：getRank</li>
<li>实例
<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>WordCountOrder.java </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
<span class='line-number'>137</span>
<span class='line-number'>138</span>
<span class='line-number'>139</span>
<span class='line-number'>140</span>
<span class='line-number'>141</span>
<span class='line-number'>142</span>
<span class='line-number'>143</span>
<span class='line-number'>144</span>
<span class='line-number'>145</span>
<span class='line-number'>146</span>
<span class='line-number'>147</span>
<span class='line-number'>148</span>
<span class='line-number'>149</span>
<span class='line-number'>150</span>
<span class='line-number'>151</span>
<span class='line-number'>152</span>
<span class='line-number'>153</span>
<span class='line-number'>154</span>
<span class='line-number'>155</span>
<span class='line-number'>156</span>
<span class='line-number'>157</span>
<span class='line-number'>158</span>
<span class='line-number'>159</span>
<span class='line-number'>160</span>
<span class='line-number'>161</span>
<span class='line-number'>162</span>
<span class='line-number'>163</span>
<span class='line-number'>164</span>
<span class='line-number'>165</span>
<span class='line-number'>166</span>
<span class='line-number'>167</span>
<span class='line-number'>168</span>
<span class='line-number'>169</span>
<span class='line-number'>170</span>
<span class='line-number'>171</span>
<span class='line-number'>172</span>
<span class='line-number'>173</span>
<span class='line-number'>174</span>
<span class='line-number'>175</span>
<span class='line-number'>176</span>
<span class='line-number'>177</span>
<span class='line-number'>178</span>
<span class='line-number'>179</span>
<span class='line-number'>180</span>
<span class='line-number'>181</span>
<span class='line-number'>182</span>
<span class='line-number'>183</span>
<span class='line-number'>184</span>
<span class='line-number'>185</span>
<span class='line-number'>186</span>
<span class='line-number'>187</span>
<span class='line-number'>188</span>
<span class='line-number'>189</span>
<span class='line-number'>190</span>
<span class='line-number'>191</span>
<span class='line-number'>192</span>
<span class='line-number'>193</span>
<span class='line-number'>194</span>
<span class='line-number'>195</span>
<span class='line-number'>196</span>
<span class='line-number'>197</span>
<span class='line-number'>198</span>
<span class='line-number'>199</span>
<span class='line-number'>200</span>
<span class='line-number'>201</span>
<span class='line-number'>202</span>
<span class='line-number'>203</span>
<span class='line-number'>204</span>
<span class='line-number'>205</span>
<span class='line-number'>206</span>
<span class='line-number'>207</span>
<span class='line-number'>208</span>
<span class='line-number'>209</span>
<span class='line-number'>210</span>
<span class='line-number'>211</span>
<span class='line-number'>212</span>
<span class='line-number'>213</span>
<span class='line-number'>214</span>
<span class='line-number'>215</span>
<span class='line-number'>216</span>
<span class='line-number'>217</span>
<span class='line-number'>218</span>
<span class='line-number'>219</span>
<span class='line-number'>220</span>
<span class='line-number'>221</span>
<span class='line-number'>222</span>
<span class='line-number'>223</span>
<span class='line-number'>224</span>
<span class='line-number'>225</span>
<span class='line-number'>226</span>
<span class='line-number'>227</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="o">&lt;/</span><span class="n">li</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">ul</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kn">import</span> <span class="nn">java.util.*</span><span class="o">;&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kn">import</span> <span class="nn">org.apache.lucene.analysis.TokenStream</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.apache.lucene.analysis.cn.smart.SmartChineseAnalyzer</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.apache.lucene.analysis.tokenattributes.CharTermAttribute</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.apache.lucene.analysis.util.CharArraySet</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.apache.lucene.util.Version</span><span class="o">;&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;/&lt;</span><span class="n">em</span><span class="o">&gt;</span>
</span><span class='line'> <span class="o">*</span> <span class="n">javac</span> <span class="o">-</span><span class="n">cp</span> <span class="o">&amp;</span><span class="n">lsquo</span><span class="o">;.:</span><span class="n">lucene</span><span class="o">-</span><span class="n">core</span><span class="o">-</span><span class="mf">4.10</span><span class="o">.</span><span class="mi">1</span><span class="o">.</span><span class="na">jar</span><span class="o">:</span><span class="n">lucene</span><span class="o">-</span><span class="n">analyzers</span><span class="o">-</span><span class="n">common</span><span class="o">-</span><span class="mf">4.10</span><span class="o">.</span><span class="mi">1</span><span class="o">.</span><span class="na">jar</span><span class="o">:</span><span class="n">lucene</span><span class="o">-</span><span class="n">analyzers</span><span class="o">-</span><span class="n">smartcn</span><span class="o">-</span><span class="mf">4.10</span><span class="o">.</span><span class="mi">1</span><span class="o">.</span><span class="na">jar</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="o">;</span> <span class="n">TextRankKeyword</span><span class="o">.</span><span class="na">java</span>
</span><span class='line'> <span class="o">*</span>
</span><span class='line'> <span class="o">*</span> <span class="n">java</span> <span class="o">-</span><span class="n">cp</span> <span class="o">&amp;</span><span class="n">lsquo</span><span class="o">;.:</span><span class="n">lucene</span><span class="o">-</span><span class="n">core</span><span class="o">-</span><span class="mf">4.10</span><span class="o">.</span><span class="mi">1</span><span class="o">.</span><span class="na">jar</span><span class="o">:</span><span class="n">lucene</span><span class="o">-</span><span class="n">analyzers</span><span class="o">-</span><span class="n">common</span><span class="o">-</span><span class="mf">4.10</span><span class="o">.</span><span class="mi">1</span><span class="o">.</span><span class="na">jar</span><span class="o">:</span><span class="n">lucene</span><span class="o">-</span><span class="n">analyzers</span><span class="o">-</span><span class="n">smartcn</span><span class="o">-</span><span class="mf">4.10</span><span class="o">.</span><span class="mi">1</span><span class="o">.</span><span class="na">jar</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="o">;</span> <span class="n">TextRankKeyword</span> <span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">cat</span> <span class="n">a</span><span class="o">.</span><span class="na">txt</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span> <span class="mi">50</span><span class="o">|</span><span class="n">grep</span> <span class="o">-</span><span class="n">E</span> <span class="o">&amp;</span><span class="n">lsquo</span><span class="o">;.{</span><span class="mi">2</span><span class="o">,}</span> <span class="o">&amp;</span><span class="n">ndash</span><span class="o">;</span> <span class="o">&amp;</span><span class="n">rsquo</span><span class="o">;</span>
</span><span class='line'> <span class="o">*</span>
</span><span class='line'> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;/&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;/&lt;</span><span class="n">em</span><span class="o">&gt;*</span>
</span><span class='line'> <span class="o">*</span> <span class="err">基于</span><span class="n">TextRank</span><span class="err">算法的关键字提取，适用于单文档</span>
</span><span class='line'> <span class="o">*</span> <span class="nd">@author</span> <span class="n">hankcs</span>
</span><span class='line'> <span class="o">*</span> <span class="nd">@modify</span> <span class="n">wuwenjie</span>
</span><span class='line'> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;/</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">TextRankKeyword</span> <span class="o">{&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * 提取多少个关键字</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="kt">int</span> <span class="n">nKeyword</span> <span class="o">=</span> <span class="mi">10</span><span class="o">;</span>
</span><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * 阻尼系数（ＤａｍｐｉｎｇＦａｃｔｏｒ），一般取值为0.85</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="kd">final</span> <span class="kd">static</span> <span class="kt">float</span> <span class="n">d</span> <span class="o">=</span> <span class="mf">0.85f</span><span class="o">;</span>
</span><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * 最大迭代次数</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="kd">final</span> <span class="kd">static</span> <span class="kt">int</span> <span class="n">max_iter</span> <span class="o">=</span> <span class="mi">200</span><span class="o">;</span>
</span><span class='line'><span class="kd">final</span> <span class="kd">static</span> <span class="kt">float</span> <span class="n">min_diff</span> <span class="o">=</span> <span class="mf">0.001f</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * 提取关键词</span>
</span><span class='line'><span class="cm"> * @param document 文档内容</span>
</span><span class='line'><span class="cm"> * @param size 希望提取几个关键词</span>
</span><span class='line'><span class="cm"> * @return 一个列表</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">static</span> <span class="n">List</span><span class="o">&amp;</span><span class="n">lt</span><span class="o">;</span><span class="n">String</span><span class="o">&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="n">getKeywordList</span><span class="o">(</span><span class="n">String</span> <span class="n">document</span><span class="o">,</span> <span class="kt">int</span> <span class="n">size</span><span class="o">)</span>
</span><span class='line'><span class="kd">throws</span> <span class="n">Exception</span><span class="o">{</span>
</span><span class='line'>    <span class="n">TextRankKeyword</span> <span class="n">textRankKeyword</span> <span class="o">=</span> <span class="k">new</span> <span class="n">TextRankKeyword</span><span class="o">();</span>
</span><span class='line'>    <span class="n">textRankKeyword</span><span class="o">.</span><span class="na">nKeyword</span> <span class="o">=</span> <span class="n">size</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="n">textRankKeyword</span><span class="o">.</span><span class="na">getKeyword</span><span class="o">(</span><span class="n">document</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * 提取关键词</span>
</span><span class='line'><span class="cm"> * @param content</span>
</span><span class='line'><span class="cm"> * @return</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="kd">public</span> <span class="n">List</span><span class="o">&amp;</span><span class="n">lt</span><span class="o">;</span><span class="n">String</span><span class="o">&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="n">getKeyword</span><span class="o">(</span><span class="n">String</span> <span class="n">content</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Exception</span><span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">Set</span><span class="o">&amp;</span><span class="n">lt</span><span class="o">;</span><span class="n">Map</span><span class="o">.</span><span class="na">Entry</span><span class="o">&amp;</span><span class="n">lt</span><span class="o">;</span><span class="n">String</span><span class="o">,</span> <span class="n">Float</span><span class="o">&amp;</span><span class="n">gt</span><span class="o">;&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="n">entrySet</span> <span class="o">=</span> <span class="n">getTermAndRank</span><span class="o">(</span><span class="n">content</span><span class="o">,</span> <span class="n">nKeyword</span><span class="o">).</span><span class="na">entrySet</span><span class="o">();</span>
</span><span class='line'>    <span class="n">List</span><span class="o">&amp;</span><span class="n">lt</span><span class="o">;</span><span class="n">String</span><span class="o">&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="n">result</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&amp;</span><span class="n">lt</span><span class="o">;</span><span class="n">String</span><span class="o">&amp;</span><span class="n">gt</span><span class="o">;(</span><span class="n">entrySet</span><span class="o">.</span><span class="na">size</span><span class="o">());</span>
</span><span class='line'>    <span class="k">for</span> <span class="o">(</span><span class="n">Map</span><span class="o">.</span><span class="na">Entry</span><span class="o">&amp;</span><span class="n">lt</span><span class="o">;</span><span class="n">String</span><span class="o">,</span> <span class="n">Float</span><span class="o">&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="n">entry</span> <span class="o">:</span> <span class="n">entrySet</span><span class="o">)</span>
</span><span class='line'>    <span class="o">{</span>
</span><span class='line'>        <span class="n">result</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">entry</span><span class="o">.</span><span class="na">getKey</span><span class="o">());</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">result</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * 返回全部分词结果和对应的rank</span>
</span><span class='line'><span class="cm"> * @param content</span>
</span><span class='line'><span class="cm"> * @return</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="kd">public</span> <span class="n">Map</span><span class="o">&amp;</span><span class="n">lt</span><span class="o">;</span><span class="n">String</span><span class="o">,</span><span class="n">Float</span><span class="o">&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="n">getTermAndRank</span><span class="o">(</span><span class="n">String</span> <span class="n">content</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Exception</span><span class="o">{</span>
</span><span class='line'>    <span class="k">assert</span> <span class="n">content</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">CharArraySet</span> <span class="n">cas</span> <span class="o">=</span> <span class="k">new</span> <span class="n">CharArraySet</span><span class="o">(</span><span class="mi">0</span><span class="o">,</span> <span class="kc">true</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// 自定义停用词</span>
</span><span class='line'>    <span class="n">String</span><span class="o">[]</span> <span class="n">self_stop_words</span> <span class="o">=</span> <span class="o">{</span> <span class="s">&quot;的&quot;</span><span class="o">,</span> <span class="s">&quot;在&quot;</span><span class="o">,</span><span class="s">&quot;了&quot;</span><span class="o">,</span> <span class="s">&quot;呢&quot;</span><span class="o">,</span> <span class="s">&quot;，&quot;</span><span class="o">,</span> <span class="s">&quot;：&quot;</span><span class="o">,</span> <span class="s">&quot;,&quot;</span><span class="o">,</span><span class="s">&quot;是&quot;</span><span class="o">,</span><span class="s">&quot;一&quot;</span><span class="o">,</span><span class="s">&quot;我&quot;</span><span class="o">,</span><span class="s">&quot;会&quot;</span><span class="o">,</span><span class="s">&quot;这&quot;</span><span class="o">,</span><span class="s">&quot;着&quot;</span><span class="o">,</span><span class="s">&quot;也&quot;</span><span class="o">,</span><span class="s">&quot;为&quot;</span><span class="o">,</span><span class="s">&quot;里&quot;</span><span class="o">,</span><span class="s">&quot;个&quot;</span><span class="o">,</span><span class="s">&quot;要&quot;</span><span class="o">,</span><span class="s">&quot;来&quot;</span><span class="o">,</span><span class="s">&quot;与&quot;</span><span class="o">,</span><span class="s">&quot;但&quot;</span><span class="o">,</span><span class="s">&quot;只&quot;</span><span class="o">,</span><span class="s">&quot;对&quot;</span><span class="o">,</span><span class="s">&quot;就&quot;</span><span class="o">,</span><span class="s">&quot;那些&quot;</span><span class="o">,</span><span class="s">&quot;这些&quot;</span><span class="o">,</span><span class="s">&quot;她们&quot;</span><span class="o">,</span><span class="s">&quot;我们&quot;</span><span class="o">,</span><span class="s">&quot;他们&quot;</span><span class="o">,</span><span class="s">&quot;但是&quot;</span><span class="o">,</span><span class="s">&quot;或者&quot;</span><span class="o">,</span><span class="s">&quot;一个&quot;</span><span class="o">,</span><span class="s">&quot;其他&quot;</span><span class="o">,</span><span class="s">&quot;自己&quot;</span><span class="o">,</span><span class="s">&quot;人&quot;</span><span class="o">,</span><span class="s">&quot;和&quot;</span><span class="o">,</span><span class="s">&quot;上&quot;</span><span class="o">,</span><span class="s">&quot;不&quot;</span><span class="o">,</span><span class="s">&quot;有&quot;</span><span class="o">,</span><span class="s">&quot;他&quot;</span><span class="o">};</span>
</span><span class='line'>    <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&amp;</span><span class="n">lt</span><span class="o">;</span> <span class="n">self_stop_words</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">cas</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">self_stop_words</span><span class="o">[</span><span class="n">i</span><span class="o">]);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// 加入系统默认停用词</span>
</span><span class='line'>    <span class="n">Iterator</span><span class="o">&amp;</span><span class="n">lt</span><span class="o">;</span><span class="n">Object</span><span class="o">&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="n">itor</span> <span class="o">=</span> <span class="n">SmartChineseAnalyzer</span><span class="o">.</span><span class="na">getDefaultStopSet</span><span class="o">().</span><span class="na">iterator</span><span class="o">();</span>
</span><span class='line'>    <span class="k">while</span> <span class="o">(</span><span class="n">itor</span><span class="o">.</span><span class="na">hasNext</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">cas</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">itor</span><span class="o">.</span><span class="na">next</span><span class="o">());</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// 中英文混合分词器(其他几个分词器对中文的分析都不行)</span>
</span><span class='line'>    <span class="n">SmartChineseAnalyzer</span> <span class="n">sca</span> <span class="o">=</span> <span class="k">new</span> <span class="n">SmartChineseAnalyzer</span><span class="o">(</span><span class="n">cas</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>    <span class="n">List</span><span class="o">&amp;</span><span class="n">lt</span><span class="o">;</span><span class="n">String</span><span class="o">&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="n">wordList</span> <span class="o">=</span> <span class="k">new</span> <span class="n">LinkedList</span><span class="o">&amp;</span><span class="n">lt</span><span class="o">;</span><span class="n">String</span><span class="o">&amp;</span><span class="n">gt</span><span class="o">;();</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">TokenStream</span> <span class="n">ts</span> <span class="o">=</span> <span class="n">sca</span><span class="o">.</span><span class="na">tokenStream</span><span class="o">(</span><span class="s">&quot;field&quot;</span><span class="o">,</span> <span class="n">content</span><span class="o">);</span>
</span><span class='line'>    <span class="n">CharTermAttribute</span> <span class="n">ch</span> <span class="o">=</span> <span class="n">ts</span><span class="o">.</span><span class="na">addAttribute</span><span class="o">(</span><span class="n">CharTermAttribute</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">ts</span><span class="o">.</span><span class="na">reset</span><span class="o">();</span>
</span><span class='line'>    <span class="k">while</span> <span class="o">(</span><span class="n">ts</span><span class="o">.</span><span class="na">incrementToken</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">wordList</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">ch</span><span class="o">.</span><span class="na">toString</span><span class="o">());</span>
</span><span class='line'>        <span class="c1">//System.out.print(ch.toString()+&quot;\\&quot;);</span>
</span><span class='line'>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="n">ts</span><span class="o">.</span><span class="na">end</span><span class="o">();</span>
</span><span class='line'>    <span class="n">ts</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="nf">getRank</span><span class="o">(</span><span class="n">wordList</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * 返回分数最高的前size个分词结果和对应的rank</span>
</span><span class='line'><span class="cm"> * @param content</span>
</span><span class='line'><span class="cm"> * @param size</span>
</span><span class='line'><span class="cm"> * @return</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="kd">public</span> <span class="n">Map</span><span class="o">&amp;</span><span class="n">lt</span><span class="o">;</span><span class="n">String</span><span class="o">,</span><span class="n">Float</span><span class="o">&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="n">getTermAndRank</span><span class="o">(</span><span class="n">String</span> <span class="n">content</span><span class="o">,</span> <span class="n">Integer</span> <span class="n">size</span><span class="o">)</span><span class="kd">throws</span> <span class="n">Exception</span><span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">Map</span><span class="o">&amp;</span><span class="n">lt</span><span class="o">;</span><span class="n">String</span><span class="o">,</span> <span class="n">Float</span><span class="o">&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="n">map</span> <span class="o">=</span> <span class="n">getTermAndRank</span><span class="o">(</span><span class="n">content</span><span class="o">);</span>
</span><span class='line'>    <span class="n">Map</span><span class="o">&amp;</span><span class="n">lt</span><span class="o">;</span><span class="n">String</span><span class="o">,</span> <span class="n">Float</span><span class="o">&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="n">result</span> <span class="o">=</span> <span class="k">new</span> <span class="n">LinkedHashMap</span><span class="o">&amp;</span><span class="n">lt</span><span class="o">;</span><span class="n">String</span><span class="o">,</span> <span class="n">Float</span><span class="o">&amp;</span><span class="n">gt</span><span class="o">;();</span>
</span><span class='line'>    <span class="k">for</span> <span class="o">(</span><span class="n">Map</span><span class="o">.</span><span class="na">Entry</span><span class="o">&amp;</span><span class="n">lt</span><span class="o">;</span><span class="n">String</span><span class="o">,</span> <span class="n">Float</span><span class="o">&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="n">entry</span> <span class="o">:</span> <span class="k">new</span> <span class="n">MaxHeap</span><span class="o">&amp;</span><span class="n">lt</span><span class="o">;</span><span class="n">Map</span><span class="o">.</span><span class="na">Entry</span><span class="o">&amp;</span><span class="n">lt</span><span class="o">;</span><span class="n">String</span><span class="o">,</span> <span class="n">Float</span><span class="o">&amp;</span><span class="n">gt</span><span class="o">;&amp;</span><span class="n">gt</span><span class="o">;(</span><span class="n">size</span><span class="o">,</span> <span class="k">new</span> <span class="n">Comparator</span><span class="o">&amp;</span><span class="n">lt</span><span class="o">;</span><span class="n">Map</span><span class="o">.</span><span class="na">Entry</span><span class="o">&amp;</span><span class="n">lt</span><span class="o">;</span><span class="n">String</span><span class="o">,</span> <span class="n">Float</span><span class="o">&amp;</span><span class="n">gt</span><span class="o">;&amp;</span><span class="n">gt</span><span class="o">;()</span>
</span><span class='line'>    <span class="o">{</span>
</span><span class='line'>        <span class="nd">@Override</span>
</span><span class='line'>        <span class="kd">public</span> <span class="kt">int</span> <span class="nf">compare</span><span class="o">(</span><span class="n">Map</span><span class="o">.</span><span class="na">Entry</span><span class="o">&amp;</span><span class="n">lt</span><span class="o">;</span><span class="n">String</span><span class="o">,</span> <span class="n">Float</span><span class="o">&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="n">o1</span><span class="o">,</span> <span class="n">Map</span><span class="o">.</span><span class="na">Entry</span><span class="o">&amp;</span><span class="n">lt</span><span class="o">;</span><span class="n">String</span><span class="o">,</span> <span class="n">Float</span><span class="o">&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="n">o2</span><span class="o">)</span>
</span><span class='line'>        <span class="o">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">o1</span><span class="o">.</span><span class="na">getValue</span><span class="o">().</span><span class="na">compareTo</span><span class="o">(</span><span class="n">o2</span><span class="o">.</span><span class="na">getValue</span><span class="o">());</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}).</span><span class="na">addAll</span><span class="o">(</span><span class="n">map</span><span class="o">.</span><span class="na">entrySet</span><span class="o">()).</span><span class="na">toList</span><span class="o">())</span>
</span><span class='line'>    <span class="o">{</span>
</span><span class='line'>        <span class="n">result</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">entry</span><span class="o">.</span><span class="na">getKey</span><span class="o">(),</span> <span class="n">entry</span><span class="o">.</span><span class="na">getValue</span><span class="o">());</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="n">result</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * 使用已经分好的词来计算rank</span>
</span><span class='line'><span class="cm"> * @param termList</span>
</span><span class='line'><span class="cm"> * @return</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="kd">public</span> <span class="n">Map</span><span class="o">&amp;</span><span class="n">lt</span><span class="o">;</span><span class="n">String</span><span class="o">,</span><span class="n">Float</span><span class="o">&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="n">getRank</span><span class="o">(</span><span class="n">List</span><span class="o">&amp;</span><span class="n">lt</span><span class="o">;</span><span class="n">String</span><span class="o">&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="n">wordList</span><span class="o">)</span>
</span><span class='line'><span class="o">{</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="c1">//        System.out.println(wordList);&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span>    <span class="n">Map</span><span class="o">&amp;</span><span class="n">lt</span><span class="o">;</span><span class="n">String</span><span class="o">,</span> <span class="n">Set</span><span class="o">&amp;</span><span class="n">lt</span><span class="o">;</span><span class="n">String</span><span class="o">&amp;</span><span class="n">gt</span><span class="o">;&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="n">words</span> <span class="o">=</span> <span class="k">new</span> <span class="n">TreeMap</span><span class="o">&amp;</span><span class="n">lt</span><span class="o">;</span><span class="n">String</span><span class="o">,</span> <span class="n">Set</span><span class="o">&amp;</span><span class="n">lt</span><span class="o">;</span><span class="n">String</span><span class="o">&amp;</span><span class="n">gt</span><span class="o">;&amp;</span><span class="n">gt</span><span class="o">;();</span>
</span><span class='line'>    <span class="n">Queue</span><span class="o">&amp;</span><span class="n">lt</span><span class="o">;</span><span class="n">String</span><span class="o">&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="n">que</span> <span class="o">=</span> <span class="k">new</span> <span class="n">LinkedList</span><span class="o">&amp;</span><span class="n">lt</span><span class="o">;</span><span class="n">String</span><span class="o">&amp;</span><span class="n">gt</span><span class="o">;();</span>
</span><span class='line'>    <span class="k">for</span> <span class="o">(</span><span class="n">String</span> <span class="n">w</span> <span class="o">:</span> <span class="n">wordList</span><span class="o">)</span>
</span><span class='line'>    <span class="o">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(!</span><span class="n">words</span><span class="o">.</span><span class="na">containsKey</span><span class="o">(</span><span class="n">w</span><span class="o">))</span>
</span><span class='line'>        <span class="o">{</span>
</span><span class='line'>            <span class="n">words</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">w</span><span class="o">,</span> <span class="k">new</span> <span class="n">TreeSet</span><span class="o">&amp;</span><span class="n">lt</span><span class="o">;</span><span class="n">String</span><span class="o">&amp;</span><span class="n">gt</span><span class="o">;());</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="n">que</span><span class="o">.</span><span class="na">offer</span><span class="o">(</span><span class="n">w</span><span class="o">);</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">que</span><span class="o">.</span><span class="na">size</span><span class="o">()</span> <span class="o">&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="mi">5</span><span class="o">)</span>
</span><span class='line'>        <span class="o">{</span>
</span><span class='line'>            <span class="n">que</span><span class="o">.</span><span class="na">poll</span><span class="o">();</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">for</span> <span class="o">(</span><span class="n">String</span> <span class="n">w1</span> <span class="o">:</span> <span class="n">que</span><span class="o">)</span>
</span><span class='line'>        <span class="o">{</span>
</span><span class='line'>            <span class="k">for</span> <span class="o">(</span><span class="n">String</span> <span class="n">w2</span> <span class="o">:</span> <span class="n">que</span><span class="o">)</span>
</span><span class='line'>            <span class="o">{</span>
</span><span class='line'>                <span class="k">if</span> <span class="o">(</span><span class="n">w1</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="n">w2</span><span class="o">))</span>
</span><span class='line'>                <span class="o">{</span>
</span><span class='line'>                    <span class="k">continue</span><span class="o">;</span>
</span><span class='line'>                <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>                <span class="n">words</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">w1</span><span class="o">).</span><span class="na">add</span><span class="o">(</span><span class="n">w2</span><span class="o">);</span>
</span><span class='line'>                <span class="n">words</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">w2</span><span class="o">).</span><span class="na">add</span><span class="o">(</span><span class="n">w1</span><span class="o">);</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="c1">//        System.out.println(words);&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span>    <span class="n">Map</span><span class="o">&amp;</span><span class="n">lt</span><span class="o">;</span><span class="n">String</span><span class="o">,</span> <span class="n">Float</span><span class="o">&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="n">score</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HashMap</span><span class="o">&amp;</span><span class="n">lt</span><span class="o">;</span><span class="n">String</span><span class="o">,</span> <span class="n">Float</span><span class="o">&amp;</span><span class="n">gt</span><span class="o">;();</span>
</span><span class='line'>    <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&amp;</span><span class="n">lt</span><span class="o">;</span> <span class="n">max_iter</span><span class="o">;</span> <span class="o">++</span><span class="n">i</span><span class="o">)</span>
</span><span class='line'>    <span class="o">{</span>
</span><span class='line'>        <span class="n">Map</span><span class="o">&amp;</span><span class="n">lt</span><span class="o">;</span><span class="n">String</span><span class="o">,</span> <span class="n">Float</span><span class="o">&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="n">m</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HashMap</span><span class="o">&amp;</span><span class="n">lt</span><span class="o">;</span><span class="n">String</span><span class="o">,</span> <span class="n">Float</span><span class="o">&amp;</span><span class="n">gt</span><span class="o">;();</span>
</span><span class='line'>        <span class="kt">float</span> <span class="n">max_diff</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
</span><span class='line'>        <span class="k">for</span> <span class="o">(</span><span class="n">Map</span><span class="o">.</span><span class="na">Entry</span><span class="o">&amp;</span><span class="n">lt</span><span class="o">;</span><span class="n">String</span><span class="o">,</span> <span class="n">Set</span><span class="o">&amp;</span><span class="n">lt</span><span class="o">;</span><span class="n">String</span><span class="o">&amp;</span><span class="n">gt</span><span class="o">;&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="n">entry</span> <span class="o">:</span> <span class="n">words</span><span class="o">.</span><span class="na">entrySet</span><span class="o">())</span>
</span><span class='line'>        <span class="o">{</span>
</span><span class='line'>            <span class="n">String</span> <span class="n">key</span> <span class="o">=</span> <span class="n">entry</span><span class="o">.</span><span class="na">getKey</span><span class="o">();</span>
</span><span class='line'>            <span class="n">Set</span><span class="o">&amp;</span><span class="n">lt</span><span class="o">;</span><span class="n">String</span><span class="o">&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="n">value</span> <span class="o">=</span> <span class="n">entry</span><span class="o">.</span><span class="na">getValue</span><span class="o">();</span>
</span><span class='line'>            <span class="n">m</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">key</span><span class="o">,</span> <span class="mi">1</span> <span class="o">-</span> <span class="n">d</span><span class="o">);</span>
</span><span class='line'>            <span class="k">for</span> <span class="o">(</span><span class="n">String</span> <span class="n">element</span> <span class="o">:</span> <span class="n">value</span><span class="o">)</span>
</span><span class='line'>            <span class="o">{</span>
</span><span class='line'>                <span class="kt">int</span> <span class="n">size</span> <span class="o">=</span> <span class="n">words</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">element</span><span class="o">).</span><span class="na">size</span><span class="o">();</span>
</span><span class='line'>                <span class="k">if</span> <span class="o">(</span><span class="n">key</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="n">element</span><span class="o">)</span> <span class="o">||</span> <span class="n">size</span> <span class="o">==</span> <span class="mi">0</span><span class="o">)</span> <span class="k">continue</span><span class="o">;</span>
</span><span class='line'>                <span class="n">m</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">key</span><span class="o">,</span> <span class="n">m</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">key</span><span class="o">)</span> <span class="o">+</span> <span class="n">d</span> <span class="o">/</span> <span class="n">size</span> <span class="o">*</span> <span class="o">(</span><span class="n">score</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">element</span><span class="o">)</span> <span class="o">==</span> <span class="kc">null</span> <span class="o">?</span> <span class="mi">0</span> <span class="o">:</span> <span class="n">score</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">element</span><span class="o">)));</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>            <span class="n">max_diff</span> <span class="o">=</span> <span class="n">Math</span><span class="o">.</span><span class="na">max</span><span class="o">(</span><span class="n">max_diff</span><span class="o">,</span> <span class="n">Math</span><span class="o">.</span><span class="na">abs</span><span class="o">(</span><span class="n">m</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">key</span><span class="o">)</span> <span class="o">-</span> <span class="o">(</span><span class="n">score</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">key</span><span class="o">)</span> <span class="o">==</span> <span class="kc">null</span> <span class="o">?</span> <span class="mi">0</span> <span class="o">:</span> <span class="n">score</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">key</span><span class="o">))));</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="n">score</span> <span class="o">=</span> <span class="n">m</span><span class="o">;</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">max_diff</span> <span class="o">&amp;</span><span class="n">lt</span><span class="o">;=</span> <span class="n">min_diff</span><span class="o">)</span> <span class="k">break</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="n">score</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Exception</span><span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">TextRankKeyword</span> <span class="n">myout</span> <span class="o">=</span> <span class="k">new</span> <span class="n">TextRankKeyword</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>    <span class="n">Map</span><span class="o">&amp;</span><span class="n">lt</span><span class="o">;</span><span class="n">String</span><span class="o">,</span><span class="n">Float</span><span class="o">&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="n">myRank</span> <span class="o">=</span> <span class="n">myout</span><span class="o">.</span><span class="na">getTermAndRank</span><span class="o">(</span><span class="n">args</span><span class="o">[</span><span class="mi">0</span><span class="o">],</span> <span class="n">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">args</span><span class="o">[</span><span class="mi">1</span><span class="o">]));</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>    <span class="k">for</span><span class="o">(</span><span class="n">String</span> <span class="nl">key:</span> <span class="n">myRank</span><span class="o">.</span><span class="na">keySet</span><span class="o">())</span>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">key</span> <span class="o">+</span> <span class="s">&quot; - &quot;</span> <span class="o">+</span> <span class="n">myRank</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">key</span><span class="o">));</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;}&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h2>测试结果</h2>

<ul>
<li>某抱怨养猫新闻
<code>text
猫 - 10.739771
记者 - 6.869424
居民 - 5.822851
养 - 5.185602
该 - 4.929795
家 - 3.1442623
楼 - 2.9776037
中 - 2.8466675
咪 - 2.7177916
小区 - 2.664779
</code></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[BIG_DATA杂谈(2)-hadoop探究《三国演义》的词频-改]]></title>
    <link href="http://www.wuwenjie.tk/blog/2015/11/27/big-dataza-tan-2-hadooptan-jiu-san-guo-yan-yi-de-ci-pin-gai/"/>
    <updated>2015-11-27T20:36:00+08:00</updated>
    <id>http://www.wuwenjie.tk/blog/2015/11/27/big-dataza-tan-2-hadooptan-jiu-san-guo-yan-yi-de-ci-pin-gai</id>
    <content type="html"><![CDATA[<h2>与传统文化的碰撞</h2>

<ul>
<li>虽然这个时代日新月异，但古老的故事依然让人们留恋。</li>
<li>此次用hadoop从另一个方面，探究一下脍炙人口的《三国演义》。</li>
</ul>


<h2>原理</h2>

<ul>
<li>利用lucene的<a href="http://lucene.apache.org/core/5_4_0/analyzers-smartcn/index.html">smartcn</a>进行分词，结合<a href="https://www.ibm.com/developerworks/cn/opensource/os-cn-hadoop2/">hadoop的编写wordcount</a>，进行词频统计。</li>
</ul>


<h2>难点</h2>

<ul>
<li>编译与运行包含第三方jar包的hadoop程序。</li>
</ul>


<!-- more -->


<h2>准备工作</h2>

<ul>
<li><p>启动hdfs与yarn
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">cd</span> ~/hello/bigdata/hadoop-2.7.1 <span class="c">#hadoop所在文件夹</span>
</span><span class='line'>sbin/start-dfs.sh
</span><span class='line'>sbin/start-yarn.sh
</span><span class='line'>jps
</span></code></pre></td></tr></table></div></figure></notextile></div></p></li>
<li><p>hadoop执行准备工作
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">export </span><span class="nv">JAVA_HOME</span><span class="o">=</span>&amp;ldquo;/usr/lib/jvm/java-7-openjdk-i386&amp;rdquo;
</span><span class='line'><span class="nb">export </span><span class="nv">PATH</span><span class="o">=</span><span class="k">${</span><span class="nv">JAVA_HOME</span><span class="k">}</span>/bin:<span class="k">${</span><span class="nv">PATH</span><span class="k">}</span>
</span><span class='line'><span class="nb">export </span><span class="nv">HADOOP_CLASSPATH</span><span class="o">=</span><span class="k">${</span><span class="nv">JAVA_HOME</span><span class="k">}</span>/lib/tools.jar
</span></code></pre></td></tr></table></div></figure></notextile></div></p></li>
<li><p>编写WordCountOrder 进行词频统计</p></li>
<li>cd ~/hello/bigdata/hadoop_ex/wordcount
<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>WordCountOrder.java </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
<span class='line-number'>137</span>
<span class='line-number'>138</span>
<span class='line-number'>139</span>
<span class='line-number'>140</span>
<span class='line-number'>141</span>
<span class='line-number'>142</span>
<span class='line-number'>143</span>
<span class='line-number'>144</span>
<span class='line-number'>145</span>
<span class='line-number'>146</span>
<span class='line-number'>147</span>
<span class='line-number'>148</span>
<span class='line-number'>149</span>
<span class='line-number'>150</span>
<span class='line-number'>151</span>
<span class='line-number'>152</span>
<span class='line-number'>153</span>
<span class='line-number'>154</span>
<span class='line-number'>155</span>
<span class='line-number'>156</span>
<span class='line-number'>157</span>
<span class='line-number'>158</span>
<span class='line-number'>159</span>
<span class='line-number'>160</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="o">&lt;/</span><span class="n">li</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">ul</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kn">import</span> <span class="nn">java.io.IOException</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.util.Random</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.util.StringTokenizer</span><span class="o">;&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kn">import</span> <span class="nn">org.apache.hadoop.conf.Configuration</span><span class="o">;&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kn">import</span> <span class="nn">org.apache.hadoop.fs.FileSystem</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.apache.hadoop.fs.Path</span><span class="o">;&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kn">import</span> <span class="nn">org.apache.hadoop.io.IntWritable</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.apache.hadoop.io.Text</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.apache.hadoop.io.WritableComparable</span><span class="o">;&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kn">import</span> <span class="nn">org.apache.hadoop.mapreduce.Job</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.apache.hadoop.mapreduce.Mapper</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.apache.hadoop.mapreduce.Reducer</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.apache.hadoop.mapreduce.lib.input.FileInputFormat</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.apache.hadoop.mapreduce.lib.input.SequenceFileInputFormat</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.apache.hadoop.mapreduce.lib.map.InverseMapper</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.apache.hadoop.mapreduce.lib.output.FileOutputFormat</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.apache.hadoop.mapreduce.lib.output.SequenceFileOutputFormat</span><span class="o">;&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kn">import</span> <span class="nn">org.apache.hadoop.util.GenericOptionsParser</span><span class="o">;&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kn">import</span> <span class="nn">java.util.Iterator</span><span class="o">;&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kn">import</span> <span class="nn">org.apache.lucene.analysis.TokenStream</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.apache.lucene.analysis.cn.smart.SmartChineseAnalyzer</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.apache.lucene.analysis.tokenattributes.CharTermAttribute</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.apache.lucene.analysis.util.CharArraySet</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.apache.lucene.util.Version</span><span class="o">;&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kd">public</span> <span class="kd">class</span> <span class="nc">WordCountOrder</span> <span class="o">{&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="kd">public</span> <span class="kd">static</span> <span class="kd">class</span> <span class="nc">TokenizerMapper</span> <span class="kd">extends</span> <span class="n">Mapper</span><span class="o">&amp;</span><span class="n">lt</span><span class="o">;</span><span class="n">Object</span><span class="o">,</span> <span class="n">Text</span><span class="o">,</span> <span class="n">Text</span><span class="o">,</span> <span class="n">IntWritable</span><span class="o">&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="kd">final</span> <span class="kd">static</span> <span class="n">IntWritable</span> <span class="n">one</span> <span class="o">=</span> <span class="k">new</span> <span class="n">IntWritable</span><span class="o">(</span><span class="mi">1</span><span class="o">);</span>
</span><span class='line'>    <span class="kd">private</span> <span class="n">Text</span> <span class="n">word</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Text</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">map</span><span class="o">(</span><span class="n">Object</span> <span class="n">key</span><span class="o">,</span> <span class="n">Text</span> <span class="n">value</span><span class="o">,</span> <span class="n">Context</span> <span class="n">context</span><span class="o">)</span>
</span><span class='line'>            <span class="kd">throws</span> <span class="n">IOException</span><span class="o">,</span> <span class="n">InterruptedException</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>        <span class="cm">/*</span>
</span><span class='line'><span class="cm">        String[] self_stop_words = { &quot;的&quot;, &quot;在&quot;,&quot;了&quot;, &quot;呢&quot;, &quot;是&quot;};</span>
</span><span class='line'><span class="cm">        CharArraySet cas = new CharArraySet(0, true);</span>
</span><span class='line'><span class="cm">        for(int i = 0; i &amp;lt; self_stop_words.length; i++) {</span>
</span><span class='line'><span class="cm">              cas.add(self_stop_words[i]);</span>
</span><span class='line'><span class="cm">        }</span>
</span><span class='line'><span class="cm">        // 加入系统默认停用词</span>
</span><span class='line'><span class="cm">        Iterator&amp;lt;Object&amp;gt; itor = SmartChineseAnalyzer.getDefaultStopSet().iterator();</span>
</span><span class='line'><span class="cm">        while (itor.hasNext()) {</span>
</span><span class='line'><span class="cm">            cas.add(itor.next());</span>
</span><span class='line'><span class="cm">        }</span>
</span><span class='line'><span class="cm">        */</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// 中英文混合分词器</span>
</span><span class='line'>        <span class="n">SmartChineseAnalyzer</span> <span class="n">sca</span> <span class="o">=</span> <span class="k">new</span> <span class="n">SmartChineseAnalyzer</span><span class="o">();</span>
</span><span class='line'>        <span class="c1">//SmartChineseAnalyzer sca = new SmartChineseAnalyzer(cas);</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">TokenStream</span> <span class="n">ts</span> <span class="o">=</span> <span class="n">sca</span><span class="o">.</span><span class="na">tokenStream</span><span class="o">(</span><span class="s">&quot;field&quot;</span><span class="o">,</span> <span class="n">value</span><span class="o">.</span><span class="na">toString</span><span class="o">());</span>
</span><span class='line'>        <span class="n">CharTermAttribute</span> <span class="n">ch</span> <span class="o">=</span> <span class="n">ts</span><span class="o">.</span><span class="na">addAttribute</span><span class="o">(</span><span class="n">CharTermAttribute</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">ts</span><span class="o">.</span><span class="na">reset</span><span class="o">();</span>
</span><span class='line'>        <span class="k">while</span> <span class="o">(</span><span class="n">ts</span><span class="o">.</span><span class="na">incrementToken</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">word</span><span class="o">.</span><span class="na">set</span><span class="o">(</span><span class="n">ch</span><span class="o">.</span><span class="na">toString</span><span class="o">());</span>
</span><span class='line'>            <span class="n">context</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="n">word</span><span class="o">,</span> <span class="n">one</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="n">ts</span><span class="o">.</span><span class="na">end</span><span class="o">();</span>
</span><span class='line'>        <span class="n">ts</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">static</span> <span class="kd">class</span> <span class="nc">IntSumReducer</span> <span class="kd">extends</span>
</span><span class='line'>        <span class="n">Reducer</span><span class="o">&amp;</span><span class="n">lt</span><span class="o">;</span><span class="n">Text</span><span class="o">,</span> <span class="n">IntWritable</span><span class="o">,</span> <span class="n">Text</span><span class="o">,</span> <span class="n">IntWritable</span><span class="o">&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">private</span> <span class="n">IntWritable</span> <span class="n">result</span> <span class="o">=</span> <span class="k">new</span> <span class="n">IntWritable</span><span class="o">();</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">reduce</span><span class="o">(</span><span class="n">Text</span> <span class="n">key</span><span class="o">,</span> <span class="n">Iterable</span><span class="o">&amp;</span><span class="n">lt</span><span class="o">;</span><span class="n">IntWritable</span><span class="o">&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="n">values</span><span class="o">,</span>
</span><span class='line'>            <span class="n">Context</span> <span class="n">context</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">IOException</span><span class="o">,</span> <span class="n">InterruptedException</span> <span class="o">{</span>
</span><span class='line'>        <span class="kt">int</span> <span class="n">sum</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
</span><span class='line'>        <span class="k">for</span> <span class="o">(</span><span class="n">IntWritable</span> <span class="n">val</span> <span class="o">:</span> <span class="n">values</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">sum</span> <span class="o">+=</span> <span class="n">val</span><span class="o">.</span><span class="na">get</span><span class="o">();</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="n">result</span><span class="o">.</span><span class="na">set</span><span class="o">(</span><span class="n">sum</span><span class="o">);</span>
</span><span class='line'>        <span class="n">context</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="n">key</span><span class="o">,</span> <span class="n">result</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">private</span> <span class="kd">static</span> <span class="kd">class</span> <span class="nc">IntWritableDecreasingComparator</span> <span class="kd">extends</span> <span class="n">IntWritable</span><span class="o">.</span><span class="na">Comparator</span> <span class="o">{</span>
</span><span class='line'>      <span class="kd">public</span> <span class="kt">int</span> <span class="nf">compare</span><span class="o">(</span><span class="n">WritableComparable</span> <span class="n">a</span><span class="o">,</span> <span class="n">WritableComparable</span> <span class="n">b</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="o">-</span><span class="kd">super</span><span class="o">.</span><span class="na">compare</span><span class="o">(</span><span class="n">a</span><span class="o">,</span> <span class="n">b</span><span class="o">);</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>      <span class="kd">public</span> <span class="kt">int</span> <span class="nf">compare</span><span class="o">(</span><span class="kt">byte</span><span class="o">[]</span> <span class="n">b1</span><span class="o">,</span> <span class="kt">int</span> <span class="n">s1</span><span class="o">,</span> <span class="kt">int</span> <span class="n">l1</span><span class="o">,</span> <span class="kt">byte</span><span class="o">[]</span> <span class="n">b2</span><span class="o">,</span> <span class="kt">int</span> <span class="n">s2</span><span class="o">,</span> <span class="kt">int</span> <span class="n">l2</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>          <span class="k">return</span> <span class="o">-</span><span class="kd">super</span><span class="o">.</span><span class="na">compare</span><span class="o">(</span><span class="n">b1</span><span class="o">,</span> <span class="n">s1</span><span class="o">,</span> <span class="n">l1</span><span class="o">,</span> <span class="n">b2</span><span class="o">,</span> <span class="n">s2</span><span class="o">,</span> <span class="n">l2</span><span class="o">);</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">Configuration</span> <span class="n">conf</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Configuration</span><span class="o">();</span>
</span><span class='line'>    <span class="n">String</span><span class="o">[]</span> <span class="n">otherArgs</span> <span class="o">=</span> <span class="k">new</span> <span class="n">GenericOptionsParser</span><span class="o">(</span><span class="n">conf</span><span class="o">,</span> <span class="n">args</span><span class="o">)</span>
</span><span class='line'>            <span class="o">.</span><span class="na">getRemainingArgs</span><span class="o">();</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">otherArgs</span><span class="o">.</span><span class="na">length</span> <span class="o">!=</span> <span class="mi">2</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">err</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;Usage: wordcount &amp;lt;in&amp;gt; &amp;lt;out&amp;gt;&quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">exit</span><span class="o">(</span><span class="mi">2</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="n">Path</span> <span class="n">tempDir</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Path</span><span class="o">(</span><span class="s">&quot;wordcount-temp-&quot;</span> <span class="o">+</span> <span class="n">Integer</span><span class="o">.</span><span class="na">toString</span><span class="o">(</span>
</span><span class='line'>        <span class="k">new</span> <span class="nf">Random</span><span class="o">().</span><span class="na">nextInt</span><span class="o">(</span><span class="n">Integer</span><span class="o">.</span><span class="na">MAX_VALUE</span><span class="o">)));</span> <span class="c1">//定义一个临时目录</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">Job</span> <span class="n">job</span> <span class="o">=</span> <span class="n">Job</span><span class="o">.</span><span class="na">getInstance</span><span class="o">(</span><span class="n">conf</span><span class="o">,</span> <span class="s">&quot;word count&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="n">job</span><span class="o">.</span><span class="na">setJarByClass</span><span class="o">(</span><span class="n">WordCountOrder</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span><span class='line'>    <span class="k">try</span><span class="o">{</span>
</span><span class='line'>        <span class="n">job</span><span class="o">.</span><span class="na">setMapperClass</span><span class="o">(</span><span class="n">TokenizerMapper</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span><span class='line'>        <span class="n">job</span><span class="o">.</span><span class="na">setCombinerClass</span><span class="o">(</span><span class="n">IntSumReducer</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span><span class='line'>        <span class="n">job</span><span class="o">.</span><span class="na">setReducerClass</span><span class="o">(</span><span class="n">IntSumReducer</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">job</span><span class="o">.</span><span class="na">setOutputKeyClass</span><span class="o">(</span><span class="n">Text</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span><span class='line'>        <span class="n">job</span><span class="o">.</span><span class="na">setOutputValueClass</span><span class="o">(</span><span class="n">IntWritable</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">FileInputFormat</span><span class="o">.</span><span class="na">addInputPath</span><span class="o">(</span><span class="n">job</span><span class="o">,</span> <span class="k">new</span> <span class="n">Path</span><span class="o">(</span><span class="n">otherArgs</span><span class="o">[</span><span class="mi">0</span><span class="o">]));</span>
</span><span class='line'>        <span class="n">FileOutputFormat</span><span class="o">.</span><span class="na">setOutputPath</span><span class="o">(</span><span class="n">job</span><span class="o">,</span> <span class="n">tempDir</span><span class="o">);</span>
</span><span class='line'>        <span class="c1">//先将词频统计任务的输出结果写到临时目录中, 下一个排序任务以临时目录为输入目录。</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">job</span><span class="o">.</span><span class="na">setOutputFormatClass</span><span class="o">(</span><span class="n">SequenceFileOutputFormat</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">if</span><span class="o">(</span><span class="n">job</span><span class="o">.</span><span class="na">waitForCompletion</span><span class="o">(</span><span class="kc">true</span><span class="o">)){</span> <span class="c1">//当word count结束</span>
</span><span class='line'>
</span><span class='line'>            <span class="n">Job</span> <span class="n">sortJob</span> <span class="o">=</span> <span class="n">Job</span><span class="o">.</span><span class="na">getInstance</span><span class="o">(</span><span class="n">conf</span><span class="o">,</span> <span class="s">&quot;sort&quot;</span><span class="o">);</span>
</span><span class='line'>            <span class="n">sortJob</span><span class="o">.</span><span class="na">setJarByClass</span><span class="o">(</span><span class="n">WordCountOrder</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>            <span class="n">FileInputFormat</span><span class="o">.</span><span class="na">addInputPath</span><span class="o">(</span><span class="n">sortJob</span><span class="o">,</span> <span class="n">tempDir</span><span class="o">);</span>
</span><span class='line'>            <span class="n">sortJob</span><span class="o">.</span><span class="na">setInputFormatClass</span><span class="o">(</span><span class="n">SequenceFileInputFormat</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>            <span class="n">sortJob</span><span class="o">.</span><span class="na">setMapperClass</span><span class="o">(</span><span class="n">InverseMapper</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span><span class='line'>            <span class="c1">//InverseMapper作用是实现map()之后的数据对的key和value交换</span>
</span><span class='line'>            <span class="n">sortJob</span><span class="o">.</span><span class="na">setNumReduceTasks</span><span class="o">(</span><span class="mi">1</span><span class="o">);</span>
</span><span class='line'>            <span class="c1">// Reducer 的个数限定为1, 最终输出的结果文件就是一个</span>
</span><span class='line'>            <span class="n">FileOutputFormat</span><span class="o">.</span><span class="na">setOutputPath</span><span class="o">(</span><span class="n">sortJob</span><span class="o">,</span> <span class="k">new</span> <span class="n">Path</span><span class="o">(</span><span class="n">otherArgs</span><span class="o">[</span><span class="mi">1</span><span class="o">]));</span>
</span><span class='line'>
</span><span class='line'>            <span class="n">sortJob</span><span class="o">.</span><span class="na">setOutputKeyClass</span><span class="o">(</span><span class="n">IntWritable</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span><span class='line'>            <span class="n">sortJob</span><span class="o">.</span><span class="na">setOutputValueClass</span><span class="o">(</span><span class="n">Text</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span><span class='line'>            <span class="cm">/* Hadoop 默认对 IntWritable 按升序排序，而我们需要的是按降序排列。</span>
</span><span class='line'><span class="cm">             * 因此实现了 IntWritableDecreasingComparator 类,　</span>
</span><span class='line'><span class="cm">             * 并指定使用这个自定义的 Comparator 类对输出结果中的 key (词频)进行排序*/</span>
</span><span class='line'>            <span class="n">sortJob</span><span class="o">.</span><span class="na">setSortComparatorClass</span><span class="o">(</span><span class="n">IntWritableDecreasingComparator</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>            <span class="n">System</span><span class="o">.</span><span class="na">exit</span><span class="o">(</span><span class="n">sortJob</span><span class="o">.</span><span class="na">waitForCompletion</span><span class="o">(</span><span class="kc">true</span><span class="o">)</span> <span class="o">?</span> <span class="mi">0</span> <span class="o">:</span> <span class="mi">1</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span><span class="k">finally</span><span class="o">{</span>
</span><span class='line'>        <span class="n">FileSystem</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">conf</span><span class="o">).</span><span class="na">deleteOnExit</span><span class="o">(</span><span class="n">tempDir</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<ul>
<li><p>编译java代码并打包
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">hadoop</span><span class="o">=</span>&amp;ldquo;../../hadoop-2.7.1/bin/hadoop&amp;rdquo;
</span><span class='line'>javac -cp &lt;code&gt;<span class="nv">$hadoop</span> classpath&lt;/code&gt;&amp;lsquo;:lucene-core-4.10.1.jar:lucene-analyzers-common-4.10.1.jar:lucene-analyzers-smartcn-4.10.1.jar&amp;rsquo; WordCountOrder.java
</span><span class='line'>jar cf wcr.jar WordCountOrder*.class
</span></code></pre></td></tr></table></div></figure></notextile></div></p></li>
<li><p><img src="/images/hadoop-001.png" alt="hadoop-001" /></p></li>
<li><p>察看hdfs内容</p></li>
<li>../../hadoop-2.7.1/bin/hdfs dfs -ls -R /</li>
<li><p><img src="/images/hadoop-002.png" alt="hadoop-002" /></p></li>
<li><p>运行hadoop程序
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">export </span><span class="nv">LIBJARS</span><span class="o">=</span>lucene-core-4.10.1.jar,lucene-analyzers-common-4.10.1.jar,lucene-analyzers-smartcn-4.10.1.jar
</span><span class='line'>../../hadoop-2.7.1/bin/hadoop jar wcr.jar WordCountOrder -libjars <span class="k">${</span><span class="nv">LIBJARS</span><span class="k">}</span> /hadoop/test3 /hadoop/out
</span></code></pre></td></tr></table></div></figure></notextile></div></p></li>
<li><p>运行察看界面</p></li>
<li><p><img src="/images/hadoop-003.png" alt="hadoop-003" /></p></li>
<li><p>察看词频统计结果</p></li>
<li>../../hadoop-2.7.1/bin/hdfs dfs -cat /hadoop/out/part-r-00000 > out.txt</li>
<li><p>cat out.txt | grep &lsquo;[[:digit:]]{1,}[[:blank:]].{1}$&rsquo;|head
*
<code>text
8503    曰
7077    之
3880    不
3730    兵
3495    人
3087    一
2590    有
2516    军
2389    大
2343    于
</code></p></li>
<li><p>cat out.txt | grep &lsquo;[[:digit:]]{1,}[[:blank:]].{2}$&rsquo;|head</p></li>
<li><p><code>text
880 曹操
837 将军
541 司马
512 丞相
494 关公
420 不可
406 荆州
372 夏侯
367 如此
321 主公
</code></p></li>
<li><p>cat out.txt | grep &lsquo;[[:digit:]]{1,}[[:blank:]].{3}$&rsquo;|head</p></li>
<li><p><code>text
146   诸葛亮
48  大将军
34  刀斧手
30  中郎将
29  阳平关
28  不得已
24  大丈夫
23  不可不
18  弓弩手
15  东南风
</code></p></li>
<li><p>cat out.txt | grep &lsquo;[[:digit:]]{1,}[[:blank:]].{4,}$&rsquo;|head</p></li>
<li><p><code>text
24    决一死战
22  措手不及
18  不计其数
16  深沟高垒
15  按兵不动
14  所到之处
13  勃然大怒
13  出其不意
12  人困马乏
11  将计就计
</code></p></li>
</ul>


<h2>结束语</h2>

<ul>
<li>从短短几字就不难看出，《三国演义》的主要人物、地点、策略。</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[BIG_DATA杂谈(1)-简单的hadoop伪分布式配置与测试]]></title>
    <link href="http://www.wuwenjie.tk/blog/2015/10/31/big-dataza-tan-1-jian-dan-de-hadoopwei-fen-bu-shi-pei-zhi-yu-ce-shi/"/>
    <updated>2015-10-31T20:23:00+08:00</updated>
    <id>http://www.wuwenjie.tk/blog/2015/10/31/big-dataza-tan-1-jian-dan-de-hadoopwei-fen-bu-shi-pei-zhi-yu-ce-shi</id>
    <content type="html"><![CDATA[<h2>前言</h2>

<ul>
<li><a href="https://zh.wikipedia.org/wiki/%E5%A4%A7%E6%95%B8%E6%93%9A">Big Data</a> and <a href="https://zh.wikipedia.org/wiki/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD">AI</a>&rsquo;s age has coming!</li>
<li>面对海量的数据，传统方式已无法满足用户高效地使用和处理数据了。</li>
<li><a href="http://hadoop.apache.org">hadoop</a>的意义非同一般，它赋予了人们面对bigdata的信心和能力，同时也开创了一个时代，</li>
<li>它是一个可靠的、可扩展的、分布式的计算框架,给予人们PB级的计算处理能力。</li>
<li>由<a href="https://en.wikipedia.org/wiki/Doug_Cutting">Doug Cutting</a>根据谷歌公司发表的MapReduce和GFS的论文自行实现而成。</li>
<li>诞生历史：Lucene (1999) &ndash;> Nutch (2003) &ndash;> hadoop (2011)</li>
</ul>


<!-- more -->


<h2>配置</h2>

<ul>
<li>对hadoop的配置资料有很多，不再赘述。可参考<a href="https://hadoop.apache.org/docs/r1.0.4/cn/quickstart.html#PseudoDistributed">它</a></li>
<li>主要关注的是配置中存在的问题

<ul>
<li>解决 错误: 找不到或无法加载主类 org.apache.hadoop.hdfs.server.namenode.NameNode</li>
<li> export HADOOP_HOME=/home/wuwenjie/hello/bigdata/hadoop-2.7.1</li>
<li> export PATH=&ldquo;${HADOOP_HOME}:$PATH&rdquo;</li>
<li>etc/hadoop/hadoop-env.sh 中配置JDK</li>
<li> export JAVA_HOME=&ldquo;/usr/lib/jvm/java-7-openjdk-i386&rdquo;</li>
<li>etc/hadoop 下的一些配置：
<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>etc/hadoop/core-site.xml </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;configuration&gt;</span>
</span><span class='line'><span class="nt">&lt;property&gt;</span>
</span><span class='line'>  <span class="nt">&lt;name&gt;</span>fs.defaultFS<span class="nt">&lt;/name&gt;</span>
</span><span class='line'>  <span class="nt">&lt;value&gt;</span>hdfs://localhost:9000<span class="nt">&lt;/value&gt;</span>
</span><span class='line'><span class="nt">&lt;/property&gt;</span>
</span><span class='line'><span class="nt">&lt;property&gt;&lt;br/&gt;</span>
</span><span class='line'>  <span class="nt">&lt;name&gt;</span>hadoop.tmp.dir<span class="nt">&lt;/name&gt;</span>
</span><span class='line'>  <span class="nt">&lt;value&gt;</span>/home/wuwenjie/hello/bigdata/hadoopTmpDir<span class="nt">&lt;/value&gt;&lt;br/&gt;</span>
</span><span class='line'><span class="nt">&lt;/property&gt;&lt;br/&gt;</span>
</span><span class='line'><span class="nt">&lt;/configuration&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></li>
</ul>
</li>
</ul>


<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>etc/hadoop/hdfs-site.xml </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;configuration&gt;&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;pre&gt;&lt;code&gt;</span><span class="ni">&amp;lt;</span>property<span class="ni">&amp;gt;</span>
</span><span class='line'>    <span class="ni">&amp;lt;</span>name<span class="ni">&amp;gt;</span>dfs.replication<span class="ni">&amp;lt;</span>/name<span class="ni">&amp;gt;</span>
</span><span class='line'>    <span class="ni">&amp;lt;</span>value<span class="ni">&amp;gt;</span>1<span class="ni">&amp;lt;</span>/value<span class="ni">&amp;gt;</span>
</span><span class='line'><span class="ni">&amp;lt;</span>/property<span class="ni">&amp;gt;</span>
</span><span class='line'><span class="ni">&amp;lt;</span>property<span class="ni">&amp;gt;</span>
</span><span class='line'>    <span class="ni">&amp;lt;</span>name<span class="ni">&amp;gt;</span>dfs.name.dir<span class="ni">&amp;lt;</span>/name<span class="ni">&amp;gt;</span>
</span><span class='line'>    <span class="ni">&amp;lt;</span>value<span class="ni">&amp;gt;</span>file:///home/wuwenjie/hello/bigdata/hdfs/name<span class="ni">&amp;lt;</span>/value<span class="ni">&amp;gt;</span>
</span><span class='line'><span class="ni">&amp;lt;</span>/property<span class="ni">&amp;gt;</span>
</span><span class='line'><span class="ni">&amp;lt;</span>property<span class="ni">&amp;gt;</span>
</span><span class='line'>    <span class="ni">&amp;lt;</span>name<span class="ni">&amp;gt;</span>dfs.data.dir<span class="ni">&amp;lt;</span>/name<span class="ni">&amp;gt;</span>
</span><span class='line'>    <span class="ni">&amp;lt;</span>value<span class="ni">&amp;gt;</span>file:///home/wuwenjie/hello/bigdata/hdfs/data<span class="ni">&amp;lt;</span>/value<span class="ni">&amp;gt;</span>
</span><span class='line'><span class="ni">&amp;lt;</span>/property<span class="ni">&amp;gt;</span>
</span><span class='line'><span class="nt">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;p&gt;&lt;/configuration&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>etc/hadoop/mapred-site.xml</span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;configuration&gt;&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;pre&gt;&lt;code&gt;</span><span class="ni">&amp;lt;</span>property<span class="ni">&amp;gt;</span>
</span><span class='line'>    <span class="ni">&amp;lt;</span>name<span class="ni">&amp;gt;</span>mapred.job.tracker<span class="ni">&amp;lt;</span>/name<span class="ni">&amp;gt;</span>
</span><span class='line'>    <span class="ni">&amp;lt;</span>value<span class="ni">&amp;gt;</span>localhost:9001<span class="ni">&amp;lt;</span>/value<span class="ni">&amp;gt;</span>
</span><span class='line'><span class="ni">&amp;lt;</span>/property<span class="ni">&amp;gt;</span>
</span><span class='line'>
</span><span class='line'><span class="ni">&amp;lt;</span>property<span class="ni">&amp;gt;</span>
</span><span class='line'>    <span class="ni">&amp;lt;</span>name<span class="ni">&amp;gt;</span>mapreduce.framework.name<span class="ni">&amp;lt;</span>/name<span class="ni">&amp;gt;</span>
</span><span class='line'>    <span class="ni">&amp;lt;</span>value<span class="ni">&amp;gt;</span>yarn<span class="ni">&amp;lt;</span>/value<span class="ni">&amp;gt;</span>
</span><span class='line'><span class="ni">&amp;lt;</span>/property<span class="ni">&amp;gt;</span>
</span><span class='line'><span class="nt">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;p&gt;&lt;/configuration&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>etc/hadoop/yarn-site.xml </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;configuration&gt;&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;pre&gt;&lt;code&gt;</span><span class="ni">&amp;lt;</span>!-- Site specific YARN configuration properties --<span class="ni">&amp;gt;</span>
</span><span class='line'><span class="ni">&amp;lt;</span>property<span class="ni">&amp;gt;</span>
</span><span class='line'>    <span class="ni">&amp;lt;</span>name<span class="ni">&amp;gt;</span>yarn.nodemanager.aux-services<span class="ni">&amp;lt;</span>/name<span class="ni">&amp;gt;</span>
</span><span class='line'>    <span class="ni">&amp;lt;</span>value<span class="ni">&amp;gt;</span>mapreduce_shuffle<span class="ni">&amp;lt;</span>/value<span class="ni">&amp;gt;</span>
</span><span class='line'><span class="ni">&amp;lt;</span>/property<span class="ni">&amp;gt;</span>
</span><span class='line'><span class="nt">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;p&gt;&lt;/configuration&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h2>初始化及启动</h2>

<ul>
<li>启动hdsf：sbin/start-dfs.sh</li>
<li>格式化文件系统（只需一次）：bin/hdfs namenode -format</li>
<li>启动yarn：sbin/start-yarn.sh</li>
<li>察看java进程：jps</li>
<li><p>jps命令结果
<code>text
5600 ResourceManager
5987 Jps
5024 DataNode
5399 SecondaryNameNode
5890 NodeManager
4738 NameNode
</code></p></li>
<li><p>解释</p>

<ul>
<li>ResourceManager：处理客户端请求启动/监控、ApplicationMaster监控、NodeManager资源分配与调度。</li>
<li>DataNode：HDFS工作节点，根据namenode的调度存储和检索数据，定期发送存储的block列表。</li>
<li>SecondaryNameNode：帮助NameNode管理Metadata数据，减小在NameNode上的压力。</li>
<li>NodeManager：单个节点上的资源管理、处理来自ResourceManager、ApplicationMaster的命令。</li>
<li>NameNode：管理HDFS的Namespace，维护所有文件和文件夹的元数据(metadata）。</li>
</ul>
</li>
</ul>


<h2>测试</h2>

<ul>
<li>在hdfs中创建文件夹和导入数据
<code>sh
bin/hdfs dfs -mkdir /hadoop
bin/hdfs dfs -mkdir /hadoop/test
bin/hdfs dfs -mkdir /hadoop/out
bin/hdfs dfs -put "/media/三国志.txt" /hadoop/test
</code></li>
<li>运行内置示例：grep
<code>sh
bin/hadoop jar \
    share/hadoop/mapreduce/hadoop-mapreduce-examples-2.7.1.jar \
    grep /hadoop/test /hadoop/out '漢.'
</code></li>
<li>察看结果
<code>sh
bin/hdfs dfs -cat /hadoop/out/part-r-00000
</code></li>
<li>部分结果
<code>sh
41    漢書
38  漢中
36  漢晉
34  漢，
30  漢之
29  漢室
23  漢紀
23  漢氏
16  漢末
16  漢高
14  漢朝
13  漢祖
12  漢文
12  漢祚
9   漢帝
8   漢家
7   漢水
</code></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[转]Facebook加速deep-learning研发]]></title>
    <link href="http://www.wuwenjie.tk/blog/2015/08/31/zhuan-facebookjia-su-deep-learningyan-fa/"/>
    <updated>2015-08-31T20:16:00+08:00</updated>
    <id>http://www.wuwenjie.tk/blog/2015/08/31/zhuan-facebookjia-su-deep-learningyan-fa</id>
    <content type="html"><![CDATA[<h2>引言</h2>

<ul>
<li><a href="https://zh.wikipedia.org/wiki/%E5%A4%A7%E6%95%B8%E6%93%9A">大数据</a>时代的到来是无可质疑的，但挖掘数据背后的秘密才更具价值。</li>
<li>深度学习，受益于大数据的出现和大规模计算能力的提升，它是开启未来的钥匙。</li>
</ul>


<h2>文章简介</h2>

<ul>
<li>转载的文章是Keith Adams的一份第八届超大数据库会议（XLDB2015）报告。</li>
<li>报告简述了深度学习的所遇到的困难问题与解决方法。</li>
<li>转载文章自<a href="http://www.infoq.com/cn/news/2015/07/facebook-accelerate-deep-learnin">infoq</a>，作者张天雷，有删改。</li>
</ul>


<!-- more -->


<h2>正文</h2>

<h3>前言</h3>

<blockquote><p>近年来，人工智能领域所取得的许多进步都与“深度学习”息息相关。
深度学习的多层非线性结构使其具备强大的特征表达能力和对复杂任务的建模能力。
构建成熟的深度学习模型常常涉及到巨大的训练数据集，大的模型以及超长的计算时间，
因此，深层模型的并行化框架和训练加速方法是深度学习走向实用的重要基石。</p></blockquote>

<h3>随机<a href="https://zh.wikipedia.org/wiki/%E6%A2%AF%E5%BA%A6%E4%B8%8B%E9%99%8D%E6%B3%95">梯度下降</a>（SGD）</h3>

<ul>
<li>深度学习的参数训练过程中，随机梯度下降（SGD）是最常被使用的方法。</li>
<li>在这个过程中，通常需要很多的技巧:

<ul>
<li>模型深度的选择</li>
<li>神经元个数的设定</li>
<li>训练权重的初始化</li>
<li>学习率的调整</li>
<li>Mini-batch的控制等等</li>
</ul>
</li>
<li>即便对这些技巧十分精通，实践中也要多次训练，反复摸索尝试。</li>
<li>此外，随机梯度下降本质上<strong>串行</strong>的.

<ul>
<li>深层模型参数多</li>
<li>计算量大</li>
<li>训练数据的规模更大</li>
<li>消耗很多计算资源</li>
<li>训练时间会非常长</li>
</ul>
</li>
<li>针对深度学习面临的这些挑战，Keith介绍了他们团队在加速深度学习方面所采用几种方法。</li>
</ul>


<h3>GPGPU加速</h3>

<ul>
<li>GPU（Graphic Process Units）的众核体系包含千个流处理器，可将运算并行化执行，大幅缩短模型的运算时间。</li>
<li>NVIDIA、AMD不断推进GPU大规模并行支持，General-Purposed GPU成为加速并行应用程序的重要手段。</li>
<li>GPU众核（many-core）体系结构，程序在GPU上相较于单核CPU提升几十倍乃至上千倍。</li>
<li>目前GPU已经发展到了较为成熟的阶段。用来训练深度神经网络，可充分发挥其数以千计核心的高效并行计算能力。</li>
<li>在使用海量训练数据的场景下，所耗费的时间大幅缩短，占用的服务器也更少。</li>
<li>如果针对适当的深度神经网络进行合理优化，一块GPU卡可相当于数十甚至上百台CPU服务器的计算能力。</li>
<li>GPU是深度学习模型训练方面的首选解决方案，也是Facebook当前加速深度学习的最重要方式。</li>
</ul>


<h3>数据并行（Data Parallel）</h3>

<ul>
<li>数据并行是指将训练数据切分为N份，分配给N个worker对N个分片的数据并行训练。</li>
<li>完成数据并行训练之后，模型的梯度是所有分片数据上<strong><a href="https://zh.wikipedia.org/wiki/%E6%A2%AF%E5%BA%A6">梯度</a></strong>的平均值，然后使用这个均值对参数进行更新。</li>
<li>再将更新的参数返回给N个worker进行下一次的迭代。</li>
<li>在训练的过程中，多个训练过程相互独立，每次迭代过程中worker之间的通信等比于参数的数量。</li>
<li>数据并行也存在自身的缺点，当训练数据太多时，数据并行不得不减小学习率，以保证训练过程的平稳。</li>
</ul>


<h3>模型并行（Model Parallel）</h3>

<ul>
<li>将模型拆分成几个单元，每一层都可以被拆分，由不同的训练单元分别持有，共同协作完成训练。</li>
<li>当一个计算单元上的神经元的输入来自另一个训练单元上的神经元的输出时，不同计算单元之间就产生通信开销。</li>
<li>拆分单元太多时，神经元输出值的通信量会急剧增加，导致模型的效率大幅下降。</li>
<li>多数情况下，模型并行带来的通信开销和同步消耗超过数据并行，因此加速比也不及数据并行。</li>
<li>但对于单机内存无法容纳的大模型来说，模型并行提供了一个很好的选择。</li>
<li>亦可组合数据并行和模型并行产生混合架构。</li>
</ul>


<h3>基于<a href="https://github.com/torch/torch7">Torch7</a>的深度学习（Productive Deep Learning with Torch7）</h3>

<ul>
<li>Torch7是一个为机器学习算法提供广泛支持的科学计算框架。</li>
<li>神经网络工具包实现了以下基础模块，可以方便地配置出目标多层神经网络。

<ul>
<li>均方标准差代价函数</li>
<li>非线性激活函数</li>
<li>梯度下降训练神经网络算法等</li>
</ul>
</li>
<li>Torch是机器学习和人工智能项目的核心。

<ul>
<li>不仅学术界，连google、Twitter和英特尔等企业也都使用这一架构。</li>
</ul>
</li>
<li>Facebook开发了一些能够在Torch7上更快速地训练神经网络的模块，加快了基于Torch的深度学习项目的运行速度。

<ul>
<li>允许开发者使用多个GPU进行参数的并行训练。</li>
<li>可使卷积神经网络的训练速度提升数十倍以上，而卷积神经网络是很多深度学习系统的核心。</li>
<li>另外，Facebook还推出了多款工具，速度常常比Torch默认工具快3至10倍。</li>
</ul>
</li>
</ul>


<h3>参数服务器架构（Parameter Server Architecture）</h3>

<ul>
<li>CPU集群方案的基本架构包含：

<ul>
<li>用于执行训练任务的Worker</li>
<li>用于分布式存储分发模型的参数服务器（Parameter Server）</li>
<li>用于协调整体任务的主控程序（Master）</li>
</ul>
</li>
<li>CPU集群方案适合训练GPU内存难以容纳的大模型，以及稀疏连接神经网络。</li>
<li>Keith还对Andrew Ng和Jeff Dean提出的参数服务器架构进行了简单介绍。

<ul>
<li>他们在Google用1000台CPU服务器，完成了模型并行和Downpour SGD数据并行的深度神经网络训练。</li>
<li>Andrew Ng和Jeff Dean的这项<a href="http://papers.nips.cc/paper/4687-large-scale-distributed-deep-networks">成果</a>发表在NIPS2012上。</li>
</ul>
</li>
</ul>


<h3>总结</h3>

<ul>
<li>报告中，还提到了Tensor DSM等其他的方式用于加速深度学习。</li>
<li><blockquote><p>深度学习可通过学习一种深层非线性网络结构，实现复杂函数逼近，并展现了强大的学习数据集本质和高度抽象化特征的能力。</p></blockquote></li>
<li><blockquote><p>但是其面临的最大问题是如何解决其过长的计算时间，
只有强有力的基础设施和定制化的并行计算框架，才能让以往不可想象的训练任务加速完成，为深度学习走向实用奠定坚实的基础。</p></blockquote></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[K-means聚类的应用]]></title>
    <link href="http://www.wuwenjie.tk/blog/2015/05/31/k-meansju-lei-de-ying-yong/"/>
    <updated>2015-05-31T19:02:00+08:00</updated>
    <id>http://www.wuwenjie.tk/blog/2015/05/31/k-meansju-lei-de-ying-yong</id>
    <content type="html"><![CDATA[<h1>K-means 简介</h1>

<ul>
<li>K-means算法（k-means clustering）：一种适用于大样本的无监督式的聚类分析方法。</li>
<li>我对算法基本原理的理解：</li>
<li>1.随机初始化k个聚类中心，也可以指定聚类中心。</li>
<li>2.计算样本与聚类中心的距离，将样本划分到最近的聚类中心的类里。</li>
<li>3.划分完毕后，计算每个类新的聚类中心，可以采用不同算法计算。</li>
<li>4.如果新的聚类中心没有变化，算法结束；如果有变化，goto 2、3。</li>
</ul>


<h1>K-means 应用</h1>

<ul>
<li>由于它流行于数据挖掘领域，常用来探索未知客群的结构。</li>
<li>在划分问题中，作为预处理工作，划分出了大致类别，然后可探究类内特性和差异。</li>
<li>其他：可以用作一种剔除算法、<a href="http://zh.wikipedia.org/zh/K-%E5%B9%B3%E5%9D%87%E7%AE%97%E6%B3%95">向量的量化、特征学习</a>。</li>
</ul>


<h1>K-means 的 R 实践</h1>

<ul>
<li>使用R语言使用K-means算法快捷方便。</li>
</ul>


<!-- more -->


<p>```js</p>

<h1>初始化数据</h1>

<p>m &lt;&ndash; rbind(
matrix(rnorm(100, sd = 0.6), ncol = 2), # 标准正态分布
matrix(rnorm(100, mean = 2, sd = 0.6), ncol = 2),
matrix(rnorm(100, mean = 4, sd = 0.6), ncol = 2),
matrix(rnorm(50, mean = -3, sd = 0.6), ncol = 2)
)
colnames(m) &lt;&ndash; c(&ldquo;x&rdquo;, &ldquo;y&rdquo;)</p>

<p>m  &lt;&ndash; apply(m,2,scale) # 标准化
cl &lt;&ndash; kmeans(m, 4) # 使用Kmeans进行聚类分析</p>

<p>cl</p>

<p>cl$size  # 聚类每个分组的数量
cl$totss # The total sum of squares.
cl$withinss # Vector of within-cluster sum of squares
cl$centers  # 聚类中心
1-(cl$tot.withinss/cl$totss)  #1-(sum(cl$withinss)/cl$totss)</p>

<h6>#</h6>

<h1>K-means 确定组数1</h1>

<p>png(&ldquo;Kmeans_group_1.png&rdquo;) # 输出图像到png文件</p>

<p>wss &lt;&ndash; (nrow(m)-1)*sum(apply(m,2,var))</p>

<p>for(i in 2:20)</p>

<pre><code>wss[i] &lt;- sum(kmeans(m,centers=i)$withinss)
</code></pre>

<p>plot(1:20,wss,type=&ldquo;b&rdquo;,xlab=&ldquo;No. Clusters&rdquo;,</p>

<pre><code>    ylab="Within groups sum of squares",
    main="Kmeans Centers Method 1")
</code></pre>

<p>identify(wss)
dev.off()</p>

<h1>K-means 确定组数2</h1>

<p>png(&ldquo;Kmeans_group_2.png&rdquo;)</p>

<p>wt &lt;&ndash; c()
for(i in 1:20){</p>

<pre><code>ks &lt;- kmeans(m,centers=i)
wt[i] &lt;- (1 - (ks$tot.withinss / ks$totss))
</code></pre>

<p>}
plot(1:20,wt,type=&ldquo;b&rdquo;,xlab=&ldquo;No. Clusters&rdquo;,</p>

<pre><code>    ylab="tot withinss / totss",
    main="Kmeans Centers Method 2")
</code></pre>

<p>abline(h=0.9);identify(wt)</p>

<p>dev.off()</p>

<h6>#</h6>

<h1>找出内部点</h1>

<p>resid.m &lt;&ndash; m &ndash; fitted(cl)</p>

<h1>计算 样本与对应中心点的差</h1>

<h1>cluster centers &ldquo;fitted&rdquo; to each obs.</h1>

<h2>计算距离</h2>

<p>distance &lt;&ndash; function(x){sqrt(x<a href="http://zh.wikipedia.org/zh/K-%E5%B9%B3%E5%9D%87%E7%AE%97%E6%B3%95">1</a>^2+x[2]^2)}
dis &lt;&ndash; apply(resid.m,1,distance)</p>

<h1>将距离与样本整合在一起</h1>

<p>m &lt;&ndash; as.data.frame(cbind(m,cl$cluster,dis))
colnames(m) &lt;&ndash; c(&ldquo;x&rdquo;, &ldquo;y&rdquo;,&ldquo;cluster&rdquo;,&ldquo;dis&rdquo;)</p>

<p>inpoint &lt;&ndash; c()</p>

<h1>筛选出每个类中内部的样本 小于1.2倍的类内平均距离</h1>

<p>for (i in 1:length(cl$size)){</p>

<pre><code># print(i)

tm &lt;- m[which(m$cluster == i),]

means &lt;- mean(tm$dis) #每群的平均距离

tpoint &lt;- tm[which(tm$dis &lt;= 1.2*means),]
# &lt;每群的平均距离,在类内部

inpoint &lt;- rbind(inpoint,tpoint)
</code></pre>

<p>}</p>

<p>inpoint &lt;&ndash; inpoint[,c(&ldquo;x&rdquo;,&ldquo;y&rdquo;)]
m &lt;&ndash; m[,c(&ldquo;x&rdquo;,&ldquo;y&rdquo;)]</p>

<p>png(&ldquo;Kmeans_inside.png&rdquo;)</p>

<h1>设置背景颜色</h1>

<p>par(bg = &ldquo;azure&rdquo;)</p>

<h1>画出聚类样本</h1>

<p>plot(m,col = cl$cluster,main=&ldquo;K均值聚类结果与类内聚集点&rdquo;)</p>

<h1>画出样本中心</h1>

<p>points(cl$centers, col = 1:length(cl$size), pch = 8, cex = 5)</p>

<h1>画出内部点</h1>

<p>points(inpoint, col = 1:nrow(inpoint), pch = 1, cex = 2)</p>

<p>dev.off()</p>

<p>```</p>

<ul>
<li>确定分类组数方法：</li>
<li><img src="/images/Kmeans_group_1.png" alt="确定组数方法1" /></li>
<li><img src="/images/Kmeans_group_2.png" alt="确定组数方法2" /></li>
</ul>


<h1>其他应用</h1>

<ul>
<li>最后找出内部点中，可以用作大样本快速SVM的样本筛选方法</li>
<li>因为支持向量只由超平面决定，而样本外部的点才能影响SV</li>
<li>所以可以将内部的点剔除而加快SVM的计算效率</li>
<li>如下图没有圈中的可作为训练样本，剔除可按需要进行</li>
<li><img src="/images/Kmeans_inside.png" alt="K均值聚类结果与类内聚集点" /></li>
</ul>

]]></content>
  </entry>
  
</feed>
