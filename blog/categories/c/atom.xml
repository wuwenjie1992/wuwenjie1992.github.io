<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: c | 吴文洁]]></title>
  <link href="http://www.wuwenjie.tk/blog/categories/c/atom.xml" rel="self"/>
  <link href="http://www.wuwenjie.tk/"/>
  <updated>2015-05-17T18:39:36+08:00</updated>
  <id>http://www.wuwenjie.tk/</id>
  <author>
    <name><![CDATA[wuwenjie]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[[改]Gstreamer 播放MP4 并 添加文字水印 ]]></title>
    <link href="http://www.wuwenjie.tk/blog/2015/03/31/gai-gstreamer-bo-fang-mp4-bing-tian-jia-wen-zi-shui-yin/"/>
    <updated>2015-03-31T17:58:00+08:00</updated>
    <id>http://www.wuwenjie.tk/blog/2015/03/31/gai-gstreamer-bo-fang-mp4-bing-tian-jia-wen-zi-shui-yin</id>
    <content type="html"><![CDATA[<h2>提要</h2>

<ul>
<li>之前已经写过<a href="/blog/2015/02/28/gai-java-native-interface-bo-fang-mp3/">JNI播放mp3</a>的文章，使用<a href="http://zh.wikipedia.org/wiki/GStreamer">Gstreamer</a>流式多媒体框架。</li>
<li>这次直接使用C播放MP4文件，文件对应解码器使用<a href="http://linux-wiki.cn/wiki/zh-hans/%E8%A7%86%E9%A2%91/%E7%85%A7%E7%89%87%E7%9A%84%E7%BC%96%E7%A0%81%E5%92%8C%E6%8B%8D%E7%85%A7%E4%BF%A1%E6%81%AF">ffmpeg -i 视频文件</a>命令察看。</li>
</ul>


<h2>要点</h2>

<ul>
<li>使用动态方法链接音频、视频的接收垫片。</li>
<li>使用gst_element_seek函数循环播放文件，本用来跳转播放。</li>
<li>使用textoverlay组件为视频添加文字水印。</li>
</ul>


<!-- more -->


<h2>概览</h2>

<p>```text</p>

<pre><code>                                test-pipline
</code></pre>

<hr />

<pre><code>                      [sink_pad] &gt;
                        &gt; videoqueue -&gt; textoverlay -&gt; video-decoder -&gt; video-output
</code></pre>

<p>file-source &ndash;> demuxer &ndash;></p>

<pre><code>                      [sink_pad] &gt;
                        &gt; audioqueue -&gt; audio-decoder -&gt; audio-output
</code></pre>

<hr />

<p>```</p>

<h2>code</h2>

<p>```c</p>

<h1>include &lt;gst/gst.h></h1>

<h1>include &lt;glib.h></h1>

<p>/<em>
 * 编译：
 * gcc gst_mp4.c -o gst_mp4 $(pkg-config &mdash;cflags &mdash;libs gstreamer-0.10)
 *
 * 运行：
 * ./gst_mp4 test.mp4
 *
 * 测试：
 * gst-launch-0.10 filesrc location=&ldquo;/test.mp4&rdquo; ! qtdemux name=qtdemuxer \
 * qtdemuxer. ! queue ! ffdec_h264! \
 * textoverlay deltax= 20 deltay= 20 font-desc=&ldquo;Sans Bold 8&rdquo; text=&ldquo;wuwnjie.tk&rdquo; \
 * halign = &ldquo;left&rdquo; shaded-background = &ldquo;TRUE&rdquo; valign=&ldquo;top&rdquo; wrap-mode=&ldquo;char&rdquo; \
 * xpad = &ldquo;20&rdquo; ypad = &ldquo;20&rdquo; ! autovideosink \
 * qtdemuxer. ! queue ! ffdec_aac ! autoaudiosink
 *
 * 参考：
 * blog.csdn.net/mengyy_linux/article/details/13261935
 *
 * stackoverflow.com/questions/16006142/
 * playing-avi-file-with-gstreamer-sdk-in-windows
 *
 * gstreamer-devel.966125.n4.nabble.com/
 * GStreamer-C-Code-to-play-video-td3715064.html
 *
 * stackoverflow.com/questions/12902574/
 * using-textoverlay-and-timeoverlay-together
 *
 * gstreamer.freedesktop.org/data/doc/gstreamer/0.10.1/
 * gst-plugins-base-plugins/html/gst-plugins-base-plugins-textoverlay.html
 * </em>/</p>

<p>GstElement <em>pipeline,</em>source,*demuxer,</p>

<pre><code>    *queue,*textoverlay,*decoder,*sink,
    *Audioqueue,*Audiodecoder,*Audiosink; 
</code></pre>

<p>static gboolean bus_call(GstBus <em>bus,GstMessage </em>msg,gpointer data){</p>

<pre><code>GMainLoop *loop = (GMainLoop *)data;

switch(GST_MESSAGE_TYPE(msg)){

case GST_MESSAGE_EOS:

g_print("播放结束，尝试重播,Ctrl+c 结束!\n");
/*在播放结束后，尝试重播*/
if (!gst_element_seek(pipeline,
        1.0,GST_FORMAT_TIME,GST_SEEK_FLAG_FLUSH,
        GST_SEEK_TYPE_SET, 0,//2 seconds (in nanoseconds)
        GST_SEEK_TYPE_NONE,GST_CLOCK_TIME_NONE)) {
            g_print("重播失败，准备退出!\n");
            g_main_loop_quit(loop);
    }
gst_element_set_state (pipeline,GST_STATE_PLAYING);
    break;
case GST_MESSAGE_ERROR: {
    gchar   *debug;
    GError  *error;
    gst_message_parse_error(msg,&amp;error,&amp;debug);
    g_free(debug);
    g_printerr("错误: %s\n",error-&gt;message);
    g_error_free(error);
    g_main_loop_quit(loop);
    break;
}
default:
    break;
}
return(TRUE);
</code></pre>

<p>}</p>

<p>static void on_pad_added(GstElement <em>element,GstPad </em>pad,gpointer data){</p>

<pre><code>char video[9]="video_00"; //char audio[9]="audio_00";

gchar *new_pad_name = GST_PAD_NAME(pad); 

g_print("收到来自'%s'的新垫片'%s'\n",GST_ELEMENT_NAME (element),
        new_pad_name);

GstPad *audio_sink_pad ,*video_sink_pad;
video_sink_pad = gst_element_get_static_pad(queue,"sink"); 
audio_sink_pad = gst_element_get_static_pad(Audioqueue,"sink");  

if(!strncmp(new_pad_name,video)){
    g_print("链接%s垫片\n",new_pad_name);  
    gst_pad_link(pad,video_sink_pad);
}else{
    g_print("链接%s垫片\n",new_pad_name);  
    gst_pad_link(pad,audio_sink_pad); 
}

gst_object_unref(video_sink_pad);
gst_object_unref(audio_sink_pad);
</code></pre>

<p>}</p>

<p>int main(int argc,char *argv[]){</p>

<pre><code>GMainLoop *loop;
GstBus *bus;
gst_init(&amp;argc,&amp;argv);
loop = g_main_loop_new(NULL,FALSE);

if (argc != 2)
{
    g_printerr("用法: %s &lt;mp4 filename&gt;\n",argv[0]);
    return(-1);
}

//创建用来容纳元件的新管道
pipeline = gst_pipeline_new("test-pipeline");

//生成用于读取硬盘数据的元件
source   = gst_element_factory_make("filesrc","file-source");

//流分离器
demuxer  = gst_element_factory_make("qtdemux","demuxer");

//队列元件 同步输出设备，播放视频、音频流，双线程可以独立运行并达到更好的同步效果。
queue = gst_element_factory_make("queue","videoqueue");

//向视频添加文字
textoverlay = gst_element_factory_make("textoverlay","textoverlay");

//视频解码器 GStreamer encountered a general stream error 
//GStreamer 遇到了常规流错误 ffdec_h264 ffdec_mpeg4
decoder  = gst_element_factory_make("ffdec_h264","video-decoder");

//视频回放元件
sink = gst_element_factory_make("autovideosink","video-output");

//队列元件
Audioqueue = gst_element_factory_make("queue","audioqueue");

//音频解码器
Audiodecoder = gst_element_factory_make("ffdec_aac","audio-decoder");

//音频回放元件
Audiosink = gst_element_factory_make("autoaudiosink","audio-output");

if (!pipeline || !source || !demuxer || !queue || !decoder 
    || !textoverlay || !sink || !Audioqueue || !Audiodecoder 
    || !Audiosink){
        g_printerr("有某一元件无法创建，退出！\n");
        return(-1);
}

//设置 source的location 参数 文件地址
g_object_set(G_OBJECT(source),"location",argv[1],NULL);

//得到 管道的消息总线
bus = gst_pipeline_get_bus(GST_PIPELINE(pipeline));
gst_bus_add_watch(bus,bus_call,loop); //添加消息监视器
gst_object_unref(bus);

//添加元件
gst_bin_add_many(GST_BIN(pipeline),
          source,demuxer,queue,decoder,textoverlay,sink,
          Audioqueue,Audiodecoder,Audiosink,NULL);

//分别链接元件
gst_element_link(source,demuxer);
gst_element_link_many(queue,decoder,textoverlay,sink,NULL);
gst_element_link_many(Audioqueue,Audiodecoder,Audiosink,NULL);

//按照不同的流，动态链接不同的接收衬垫 sink pad
g_signal_connect(demuxer,"pad-added",G_CALLBACK(on_pad_added),NULL);

//设置视频文字
g_object_set(G_OBJECT(textoverlay),"text","wuwenjie.tk",NULL); //文字
g_object_set(G_OBJECT(textoverlay),"deltax",20,NULL);   //x轴方向
g_object_set(G_OBJECT(textoverlay),"deltay",20,NULL);   //y轴方向
g_object_set(G_OBJECT(textoverlay),"font-desc","Sans Bold 8",NULL);//字体
g_object_set(G_OBJECT(textoverlay),"halign","left",NULL);   //水平对齐方向
g_object_set(G_OBJECT(textoverlay),"shaded-background",TRUE,NULL);  //背景
g_object_set(G_OBJECT(textoverlay),"valign","top",NULL);    //竖直方向
g_object_set(G_OBJECT(textoverlay),"wrap-mode","word",NULL);//绘制文本
g_object_set(G_OBJECT(textoverlay),"xpad",20,NULL); //水平
g_object_set(G_OBJECT(textoverlay),"ypad",20,NULL); //竖直

//开始播放
g_print("开始播放 %s\n",argv[1]);
gst_element_set_state(pipeline,GST_STATE_PLAYING);
g_main_loop_run(loop);

//停止管道处理流程
gst_element_set_state(pipeline,GST_STATE_NULL);
//释放占用的资源
gst_object_unref(GST_OBJECT(pipeline));
return(0);
</code></pre>

<p>}
```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[改]Java Native Interface 播放MP3 ]]></title>
    <link href="http://www.wuwenjie.tk/blog/2015/02/28/gai-java-native-interface-bo-fang-mp3/"/>
    <updated>2015-02-28T14:32:00+08:00</updated>
    <id>http://www.wuwenjie.tk/blog/2015/02/28/gai-java-native-interface-bo-fang-mp3</id>
    <content type="html"><![CDATA[<h1>前言与背景</h1>

<ul>
<li>JAVA对多媒体的处理能力较弱，但JNI给了我们一扇逃生门（"escape hatch"）</li>
<li><a href="http://zh.wikipedia.org/wiki/Java%E6%9C%AC%E5%9C%B0%E6%8E%A5%E5%8F%A3">JNI</a>提供给Java调用C语言、C++或被C、C++调用的功能</li>
<li>使得JAVA可以使用丰富的C、C++库，而且本地方法使程序运行更快</li>
</ul>


<h1>如何播放MP3呢？</h1>

<ul>
<li>利用JNI调用著名的<a href="http://zh.wikipedia.org/wiki/GStreamer">GStreamer</a>流式多媒体框架进行播放。</li>
<li>它采用插件（plugin）和管道（pipeline）的体系结构，可以像搭积木一样简单地创建多媒体应用。</li>
<li>并且GStreamer提供众多插件，易于扩展，以后可以考虑用Java播放视频。</li>
</ul>


<!-- more -->


<h1>在debain系下安装GStreamer</h1>

<ul>
<li>sudo apt-get install libgstreamer0.10-0 libgstreamer0.10-dev libgstreamer0.10-0-dbg</li>
<li>sudo apt-get install gstreamer0.10-plugins-ugly

<ul>
<li> 使用mad解码器插件安装该包</li>
</ul>
</li>
</ul>


<h1>CODE</h1>

<h3>1.先编写好JAVA代码，Jaudio.java</h3>

<p>```java
// javac Jaudio.java
// javah -jni Jaudio
// java -Djava.library.path=. Jaudio</p>

<p>public class Jaudio{</p>

<pre><code>// JNI 调用的方法
public native void playMP3(String url);

static{
    System.loadLibrary("Jaudio"); //加载库
}

public void play(String url){

    playMP3(url);

}

// java方法可供JNI调用
public static long nanoTime(){

    return System.nanoTime();

}

public static void main(String[] args){

    System.out.println("Wellcom to Jaudio! v0.0.1 20150211");

    //System.out.println(nanoTime());

    Jaudio audio = new Jaudio();
    audio.play(args[0]);

}
</code></pre>

<p>}
```</p>

<h3>2.javac Jaudio.java编译</h3>

<h3>3.利用 javah -jni Jaudio 生成Jaudio.h头文件</h3>

<h3>4.使用gcc编译Jaudio.c</h3>

<ul>
<li>编译命令，注：/usr/lib/jvm/java-1.7.0-openjdk-i386/include 为 jni.h路径
<code>text
gcc -fPIC -shared -static Jaudio.c -o libJaudio.so \
-I /usr/lib/jvm/java-1.7.0-openjdk-i386/include \
$(pkg-config --cflags --libs gstreamer-0.10)
</code></li>
<li>Jaudio.c
```c

<h1>include &lt;stdio.h></h1>

<h1>include &lt;jni.h></h1></li>
</ul>


<h1>include &lt;gst/gst.h></h1>

<h1>include &ldquo;Jaudio.h&rdquo;</h1>

<p>// gcc -fPIC -shared -static Jaudio.c -o libJaudio.so \
-I /usr/lib/jvm/java-1.7.0-openjdk-i386/include \
$(pkg-config &mdash;cflags &mdash;libs gstreamer-0.10)</p>

<p>/<em>
 * symbol lookup error: libJaudio.so: undefined symbol: gst_init
 * gcc参数顺序相关的问题 <a href="http://m.oschina.net/blog/97611">http://m.oschina.net/blog/97611</a>
 * 对于C/C++编译而言，读取编译选项是按照从左到右的顺序执行的 。当编译器遇到源文件时，
 * 开始对源文件中用到的函数进行解析，找到相对应函数实现（Definition of Function）。
 * 过程是按照先遇到不能解析的函数（unresolved function），
 * 然后在源文件选项后面的一些选项中寻找可能的函数体的信息，是这样的一个顺序进行的。
 * 包含函数体或者函数定义信息的编译选项出现在源文件之前，当编译器遇到不能解析的函数时，
 * 在源文件之后的选项中寻找相关的信息，也就是无法找到相关的函数定义。
 </em>/</p>

<p>// java -Djava.library.path=. Jaudio</p>

<p>//定义消息处理函数
static gboolean bus_call(GstBus <em>bus,GstMessage </em>msg,gpointer data){</p>

<pre><code>GMainLoop *loop = (GMainLoop *) data;
//这个是主循环的指针，在接受EOS消息时退出循环
gchar *debug;
GError *error;

switch (GST_MESSAGE_TYPE(msg)){
    case GST_MESSAGE_EOS:

        g_print("播放结束\n");
        g_main_loop_quit(loop);
        //退出循环
        break;
    case GST_MESSAGE_ERROR:

        gst_message_parse_error(msg,&amp;error,&amp;debug);
        g_free(debug);
        g_printerr("错误:%s\n",error-&gt;message);
        g_error_free(error);
        g_main_loop_quit(loop);
        break;
    default:
         break;
}
return TRUE;
</code></pre>

<p>}</p>

<p>JNIEXPORT void JNICALL Java_Jaudio_playMP3(JNIEnv *env, jobject this,</p>

<pre><code>    jstring jstr){

/*
 * 所有的 JNI 调用都使用了 JNIEnv * 类型的指针，
 * 习惯上在 CPP 文件中将这个变量定义为 evn，它是任意一个本地方法的第一个参数。
 * env 指针指向一个函数指针表，在 VC 中可以直接用"-&gt;"操作符访问其中的函数。
 * object指向在此Java中实例化的对象 LocalFunction 的句柄，相当于this指针。
 */
const char* str;
str = (*env)-&gt;GetStringUTFChars(env,jstr, JNI_FALSE);
// 从 jstr 字符串取得指向字符串 UTF 编码的指针
printf("播放地址：%s\n",str); 

jclass cls = (*env)-&gt;FindClass(env, "Jaudio");
if(cls != 0){
    //printf("FindClass:%p\n",cls);
    jmethodID mid = 
        (*env)-&gt;GetStaticMethodID(env, cls, "nanoTime", "()J");

    if(mid != 0){

        //printf("GetMethodID:%p\n",mid);
        jlong jl = (*env)-&gt;CallStaticLongMethod(env,cls,mid);
        long long l = jl;
        printf("Java nanoTime：%lld\n",l);//long jlong signed 64bits

    }else{
        printf("GetMethodID err\n");
    }
}else{
    printf("FindClass err\n");
}

GMainLoop *loop;
GstElement *pipeline,*source,*decoder,*sink;//定义组件
GstBus *bus;

const gchar *nano_str;
guint major, minor, micro, nano;

gst_init(NULL,NULL);    //初始化
loop = g_main_loop_new(NULL,FALSE);
//创建主循环，在执行 g_main_loop_run后正式开始循环

gst_version (&amp;major, &amp;minor, &amp;micro, &amp;nano);
if (nano == 1) nano_str = "(CVS)";
else if (nano == 2) nano_str = "(Prerelease)";
else nano_str = "";
printf("Power By\n\tJava Native Interface &amp; GStreamer%d.%d.%d %s\n",
        major, minor, micro, nano_str);
printf("\tJaudio.c v0.0.1 20150211\n");

//创建管道和组件
//创建用来容纳元件的新管道，管道是一个特殊的组件，可以更好的让数据流动
pipeline = gst_pipeline_new("audio-player");

//生成用于读取硬盘数据的元件
source = gst_element_factory_make("filesrc","file-source");

//创建解码器元件
decoder = gst_element_factory_make("mad","mad-decoder");

//创建音频回放元件
sink = gst_element_factory_make("autoaudiosink","audio-output");

/*if(!pipeline||!source||!decoder||!sink){
    g_printerr("One element could not be created.Exiting.\n");
    return -1;
}*/
if(!pipeline){
    g_printerr("GST管道不能创建!\n");
    exit(-1);
}
if(!source){
    g_printerr("GST播放文件不能创建!\n");
    exit(-1);
}
if(!decoder){
    g_printerr("GST解码元件不能创建\n");
    exit(-1);
}
if(!decoder){
    g_printerr("GST音频输出不能创建\n");
    exit(-1);
}

//设置 source的location 参数 文件地址.
g_object_set(G_OBJECT(source),"location",str,NULL);

//把组件添加到管道中
gst_bin_add_many(GST_BIN(pipeline),source,decoder,sink,NULL);

//依次连接组件
gst_element_link_many(source,decoder,sink,NULL);

//得到 管道的消息总线
bus = gst_pipeline_get_bus(GST_PIPELINE(pipeline));

//添加消息监视器
gst_bus_add_watch(bus,bus_call,loop);
gst_object_unref(bus);

//开始播放
gst_element_set_state(pipeline,GST_STATE_PLAYING);
g_print("开始播放 -&gt; %s\n",str);

//开始循环
g_main_loop_run(loop);

//停止管道处理流程
gst_element_set_state(pipeline,GST_STATE_NULL);
//释放占用的资源
gst_object_unref(GST_OBJECT(pipeline));

g_print("拜拜，退出\n");
//return 0;

(*env)-&gt;ReleaseStringUTFChars(env,jstr, (const char *)str ); 
// 通知虚拟机本地代码不再需要通过 str 访问 Java 字符串。
</code></pre>

<p>}
```</p>

<h3>运行Jaudio</h3>

<ul>
<li>如果共享库libJaudio.so与Jaudio.class在同一目录下，可省略“-Djava.library.path=”选项
<code>text
java -Djava.library.path=.  Jaudio "a.mp3"
</code></li>
</ul>


<h2>结束语</h2>

<ul>
<li>JNI是强大的给Java带来了活力与生命力。</li>
<li>Android上很多app也使用类JNI技术，被称为<a href="https://developer.android.com/tools/sdk/ndk/index.html">NDK</a>,用于业务加密、高效处理等方面。</li>
<li>Gstreamer 也提供多个平台的<a href="http://docs.gstreamer.com/display/GstSDK/Android+tutorials">SDK</a>，最感兴趣的是android平台的，可以试一试。</li>
<li><a href="https://code.google.com/p/gstreamer-java/">gstreamer-java</a>项目是一个成熟的利用JNI的Gst项目，可以使用、参考。</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[gnuplot绘图工具简单使用和simple cat]]></title>
    <link href="http://www.wuwenjie.tk/blog/2013/06/29/gnuplothui-tu-gong-ju-jian-dan-shi-yong-he-simple-cat/"/>
    <updated>2013-06-29T20:10:00+08:00</updated>
    <id>http://www.wuwenjie.tk/blog/2013/06/29/gnuplothui-tu-gong-ju-jian-dan-shi-yong-he-simple-cat</id>
    <content type="html"><![CDATA[<h1>gnuplot绘图工具简单使用</h1>

<h2>安装</h2>

<ul>
<li>sudo apt-get install gnuplot</li>
</ul>


<h2>使用</h2>

<ul>
<li>$ gnuplot</li>
<li>使用实例:<a href="http://www.ibm.com/developerworks/cn/linux/l-gnuplot/">gnuplot 让您的数据可视化</a></li>
</ul>


<!-- more -->


<h2>我的实例</h2>

<ul>
<li>画<a href="http://quote.eastmoney.com/sh600600.html">600600青岛啤酒</a>走势图和5日<a href="http://zh.wikipedia.org/zh/%E7%A7%BB%E5%8B%95%E5%B9%B3%E5%9D%87">简单移动平均线</a>

<ul>
<li>600600青岛啤酒的<a href="https://mega.co.nz/#!F4AFjaDA!S0qSqRGszmWqQdA6fQUBsl-C0bJhJtXAvvnOwEjWGAo">日线资料(19930827-20130628)</a>从<a href="http://www.qianlong.com.cn/">钱龙</a>下载</li>
<li>用<a href="https://projects.gnome.org/gnumeric/">Gnumeric</a>或<a href="http://community.wps.cn/download/">Kingsoft Spreadsheet</a>打开并另存为<a href="http://zh.wikipedia.org/wiki/CSV">CSV格式</a></li>
<li>型如

<pre><code>  * 时间,涨跌,幅度%,开盘,最高,最低,收盘,成交量,成交额
  * 1993/08/27,+0.00,+0.00,15,15.3,13.45,14,168226,24084
  * 1993/08/30,-0.74,-5.29,13.7,13.7,13.17,13.26,32937,4442
  * 1993/08/31,-0.36,-2.71,13.18,13.37,12.8,12.9,31062,4051
</code></pre>

<p>  删除第一行，600600.csv</p></li>
<li>使用cut截取 时间

<ul>
<li><code>shell
  cut -d , -f 1,7 600600.csv &gt;600600.txt
</code></li>
<li>型如

<pre><code>  * 1993/08/27,14
  * 1993/08/30,13.26
  * 1993/08/31,12.9
  * 1993/09/01,12.92
</code></pre></li>
</ul>
</li>
<li><p>使用SHELL生成移动平均线数据文本600600ma5.txt
```bash
      #!/bin/sh
      #MA 5
      #
      I=1;
      FileTime=&ldquo;&rdquo;;
      FileNum=0;
      OUT=0;
      NA=0;
      NB=0;
      NC=0;
      ND=0; #前四天数值
      NE=0;</p>

<pre><code>  while read list
  do
      FileNum=`echo $list |cut -d , -f 2 `;   #截取
      FileTime="`echo $list |cut -d , -f 1 `";

      if [  $(($I%5)) -eq 1 ] # =
          then 
          NA=$FileNum;
      elif [  $(($I%5)) -eq 2 ]
          then 
          NB=$FileNum;
      elif [  $(($I%5)) -eq 3 ]
          then 
          NC=$FileNum;
      elif [  $(($I%5)) -eq 4 ]
          then 
          ND=$FileNum;
      elif [  $(($I%5)) -eq 0 ]
          then 
          NE=$FileNum;
      fi

      if [ $I -ge 5 ]
          then    
          OUT=`awk ' BEGIN { print ('$NA'+'$NB'+'$NC'+'$ND'+'$NE')/5 }'`;
          echo "$FileTime,$OUT" &gt;&gt; 600600ma5.txt
      fi

      I=$(($I+1));
  done &lt;600600.txt
</code></pre>

<p>```</p>

<pre><code>* 型如(600600ma5.txt)
        * 1993/09/02,13.22
        * 1993/09/03,13.036
        * 1993/09/06,13
        * 1993/09/07,12.94
        * 1993/09/08,12.806
</code></pre>

<ul>
<li>编写600600.gunplot脚本画出图像</li>
</ul>
</li>
</ul>
</li>
</ul>


<p>```bash</p>

<pre><code>            set datafile separator "," #设置数据文件分割符为,
            set xdata time          #设置x数据为时间类型
            set timefmt "%Y/%m/%d"  #设置时间格式 

            set grid    #设置网格

            set title '600600 青岛啤酒' #设置标题
            set xlabel '时间'       #设置X轴名称
            set ylabel '收盘价'     #设置y轴名称

            plot "./600600.txt" using 1:2 \
            title '600600' \
            with lines #points
            #使用600600.txt的1、2列画线，名称为600600，

            #set terminal png
            #set output "output2.png"

            replot "./600600ma5.txt" using 1:2 \
            title 'MA5'    \
            with lines#points
            #添加一条使用600600ma5.txt,即移动平均线数据，的线，名称为MA5

            #pause 10   # help pause 保持窗口
</code></pre>

<p>```</p>

<ul>
<li>使用gnuplot批处理模式运行600600.gunplot
              gnuplot> load &ldquo;./600600.gunplot&rdquo;

<ul>
<li>效果

<ul>
<li><img src="/images/600600&amp;MA5_withlinespoints.png" alt="600600&amp;MA5_withlinespoints" /></li>
<li><img src="/images/600600&amp;MA5_withlines.png" alt="600600&amp;MA5_withlines" /></li>
<li><img src="/images/600600scale.png" alt="600600scale" /></li>
<li><img src="/images/600600&amp;MA5_withlinespoints0629.png" alt="600600&amp;MA5_withlinespoints0629" /></li>
</ul>
</li>
</ul>
</li>
</ul>


<hr />

<hr />

<h1>simple Cat</h1>

<p>```c</p>

<h1>include &lt;stdio.h></h1>

<h1>include &lt;sys/stat.h></h1>

<h1>include &lt;malloc.h></h1>

<h1>include &lt;stdlib.h></h1>

<p>int main(int argc, char *argv[])
{</p>

<pre><code>FILE *fp;
int i, j, k = 1;
char a[] = "";


for (i = 0; i &lt; argc &amp;&amp; argv[i + 1] != NULL; i++)
{
    printf("\nargv[%d] is: %s\n", i + 1, argv[i + 1]);

    fp = fopen(argv[i + 1], "r");

    k = getFSSystemCall(argv[i + 1]);
    printf("FileSize:%d\n", k);

    // 请求动态内存
    char *a_p = a;
    a_p = (char *)malloc(sizeof(char) * k);
    if (a_p == NULL)
    {
        puts("malloc null");
        return 1;
    }


    if (fp == NULL)
    {
        printf("\e[1;31mNO SUCH FILE\e[0m\n\n");
        printInfo();
        return 1;
    }
    //size_t fread ( void   *buffer,  size_t size,  size_t count,  FILE *stream) ;
    //返回值：实际读取的元素个数.如果返回值与count不相同,则可能文件结尾或发生错误.
    for (j = 0; fread(a_p + j, sizeof(char), 1, fp) == 1; j++)
    {
        fseek(fp, j + 1, 0);
        printf("%c", *(a_p + j));
    }

    fclose(fp);
    // 释放
    free(a_p);
}
return 0;
</code></pre>

<p>}</p>

<p>int getFileSize(FILE * fps)
{</p>

<pre><code>fseek(fps, 0L, SEEK_END);
int size = ftell(fps);
// &lt;stdio.h&gt; long ftell( FILE *s )
// 返回s当前的文件位置
// 错误返回-1
return size;
</code></pre>

<p>}</p>

<p>// include &lt;sys/stat.h>
int getFSSystemCall(char *strFileName)
{</p>

<pre><code>struct stat temp;
stat(strFileName, &amp;temp);
return temp.st_size;
</code></pre>

<p>}</p>

<p>printInfo()
{</p>

<pre><code>printf("\e[1;33m1cat:simple cat Ver:0.0.3 20130528\e[0m\n");
printf("\e[1;33mAuthor:wuwenjie.tk\e[0m\n");
</code></pre>

<p>}
```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[近况+JNI Android NDK初识]]></title>
    <link href="http://www.wuwenjie.tk/blog/2012/09/01/Current-situation-JNI-Android-NDK-first-met/"/>
    <updated>2012-09-01T19:11:00+08:00</updated>
    <id>http://www.wuwenjie.tk/blog/2012/09/01/Current-situation-JNI-Android-NDK-first-met</id>
    <content type="html"><![CDATA[<p>最近（7月末-9月初），</p>

<p>边学习，证券方面的知识</p>

<p>（为了考一个证书，出来混饭吃（还是要干一行爱一行）），</p>

<p>边搞SHELL和android application。</p>

<p>也无聊看看多啦A梦，</p>

<p>中间也出去玩过，</p>

<!-- more -->


<p>宝山和大宁国际（大悦城，南京路）。</p>

<p>外公开刀也去了医院2。</p>

<p>&nbsp;</p>

<p>暑假过的一般，对了，</p>

<p>明天有人就要去学校了，</p>

<p>不知道还玩煮线吗，</p>

<p>还是要搞搞正业，</p>

<p>（没关系，嫁个好人家，万事不愁），</p>

<p>今天梦到去家，不在，人寐，恐，出。</p>

<p>&nbsp;</p>

<p>下半年的打算，考C，6；读证券，去考出来。</p>

<p>那人我stay here，见都难，其他都别说了，</p>

<p>快了，人妻的头衔在等着你（4-5年）</p>

<p>&nbsp;</p>

<p>还有构思new诗，素材还在收集，</p>

<p>还没抒发的适合情境。</p>

<p>&nbsp;</p>

<p>&nbsp;</p>

<hr />

<p>&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&ndash; CUT HERE &mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;</p>

<hr />

<p>Java Native Interface
<a title="ndk" href="http://developer.android.com/tools/sdk/ndk/index.html" target="_blank">Android NDK</a></p>

<p>我的理解：</p>

<p>为了使applicatin更为流畅，</p>

<p>效率更高，借助C/C++，</p>

<p>很多应用都有用，</p>

<p>未来的一大发展方向吧，</p>

<p>虚拟机存在，</p>

<p>使用java</p>

<p>对我这样的初学者友善，</p>

<p>也可以向更底层发展。</p>

<p>&nbsp;</p>

<hr />

<p>A。下载NDK包，解压</p>

<p><a href="http://dl.google.com/android/ndk/android-ndk-r8b-linux-x86.tar.bz2">android-ndk-r8b-linux-x86.tar.bz2</a></p>

<hr />

<p>B。PATH设置：</p>

<p>1)在/home/用户名 下修改.bashrc</p>

<p><tt>#~/.bashrc</tt>文件决定了交互shell的行为</p>

<p>2)末尾添加</p>

<p>PATH=$PATH:/home/用户名/android-ndk-r8b
export PATH</p>

<h1>当然你要解压到 /home/用户名 下</h1>

<p>3)到其他目录 测试</p>

<p>ndk-build 命令</p>

<p>出错：成功</p>

<p>Android NDK: Could not find application project directory !
Android NDK: Please define the NDK_PROJECT_PATH variable to point to it.</p>

<h2>/home/用户名/android-ndk-r8b/build/core/build-local.mk:130: *** Android NDK: Aborting    .  Stop.</h2>

<p>C.Eclipse的设置</p>

<p>project&mdash;&gt;properties&mdash;&gt;Builders&mdash;&ndash;&gt;new&mdash;&ndash;&gt;program
&mdash;&ndash;&gt;location (*/android-ndk-r8b/ndk-build)
&mdash;&ndash;&gt;working directory(${workspace_loc:/yorproject/jni})
&mdash;&mdash;&gt;refresh  &mdash;specify resources</p>

<p>参考：<a title="设置" href="http://www.360doc.com/content/11/0223/17/2734308_95473676.shtml" target="_blank"><a href="http://www.360doc.com/content/11/0223/17/2734308_95473676.shtml">http://www.360doc.com/content/11/0223/17/2734308_95473676.shtml</a></a></p>

<p><a title="os-androidndk/" href="http://www.ibm.com/developerworks/cn/opensource/tutorials/os-androidndk/section6.html" target="_blank"><a href="http://www.ibm.com/developerworks/cn/opensource/tutorials/os-androidndk/section6.html">http://www.ibm.com/developerworks/cn/opensource/tutorials/os-androidndk/section6.html</a></a></p>

<p>&nbsp;</p>

<p>D。实践 New Project 主要（Android.mk&amp;&amp;ok.c）</p>

<p>1）准备</p>

<p>&mdash;&mdash;&mdash;&mdash;MainActivity.java&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;
```java
package tk.wuwenjie.jnidemo;
import android.os.Bundle;
import android.util.Log;
import android.widget.TextView;
import android.app.Activity;</p>

<p>public class MainActivity extends Activity {
static String TAG=&ldquo;MainActivity&rdquo;;</p>

<p>public void onCreate(Bundle savedInstanceState) {
Log.i(TAG, &ldquo;MA_oncreate!!&rdquo;);
super.onCreate(savedInstanceState);
setContentView(R.layout.activity_main);
TextView textView = (TextView)findViewById(R.id.MA_tv);</p>

<p>String myString =stringFromSo();//stringFromNDKJNI</p>

<p>textView.setText(myString);</p>

<p>printLOGI();
}</p>

<p>static{
try{System.loadLibrary(&ldquo;ok&rdquo;); }
catch(UnsatisfiedLinkError ule){
Log.i(TAG,&ldquo;WARNING: Could not load lib!&rdquo;+ule.toString());
}
}</p>

<p>public native String stringFromSo();</p>

<p>public native void printLOGI();</p>

<p>}
```</p>

<p>&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;-activity_main.xml&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;
```xml
&lt;RelativeLayout xmlns:android=&ldquo;<a href="http://schemas.android.com/apk/res/android">http://schemas.android.com/apk/res/android</a>&rdquo;</p>

<pre><code>xmlns:tools="http://schemas.android.com/tools"
android:layout_width="match_parent"
android:layout_height="match_parent" &gt;

&lt;TextView
    android:layout_width="wrap_content"
    android:layout_height="wrap_content"
    android:layout_centerHorizontal="true"
    android:layout_centerVertical="true"
    android:text="@string/hello_world"
    android:id="@+id/MA_tv" /&gt;
</code></pre>

<p></RelativeLayout>
```</p>

<p>&nbsp;</p>

<p>&nbsp;</p>

<p>&nbsp;</p>

<p>2）在src的同级目录，创建目录（mkdir jni）</p>

<p>进入 jni 创建(touch)</p>

<p>Android.mk</p>

<p>ok.c</p>

<p>&mdash;&mdash;-Android.mk&mdash;&mdash;&mdash;&ndash;
```bash
LOCAL_PATH := $(call my-dir)</p>

<p>include $(CLEAR_VARS)</p>

<p>LOCAL_MODULE    := ok     #编译的目标对象
LOCAL_LDLIBS    :=-L$(SYSROOT)/system/lib -llog        #编译指定额外库，"-lxxx"格式
LOCAL_SRC_FILES := ok.c    #编译的源文件</p>

<p>include $(BUILD_SHARED_LIBRARY)
```</p>

<p>&mdash;&mdash;&mdash;&mdash;ok.c&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&ndash;
```c</p>

<h1>include &lt;stdio.h></h1>

<h1>include &lt;string.h></h1>

<h1>include &lt;jni.h></h1>

<h1>define LOG_TAG &ldquo;TAG&rdquo; //自定义的变量，相当于logcat函数中的tag</h1>

<h1>undef LOG</h1>

<h1>include &lt;android/log.h></h1>

<h1>define LOGI(&hellip;) ((void)<strong>android_log_print(ANDROID_LOG_INFO,LOG_TAG,</strong>VA_ARGS__))</h1>

<p>jstring Java_tk_wuwenjie_jnidemo_MainActivity_stringFromSo( JNIEnv* env,jobject thiz ){</p>

<p>   return (*env)&ndash;>NewStringUTF(env, &ldquo;well,i from jni!!!OKOKOKOKOKOKOKO&rdquo;);</p>

<p>}//tk.wuwenjie.jnidemo包名  MainActivity类名 stringFromSo函数名</p>

<p>void  Java_tk_wuwenjie_jnidemo_MainActivity_printLOGI(JNIEnv * env, jobject jobj){</p>

<p> LOGI(&ldquo;LOGI\n&rdquo;);
}
```</p>

<p>&mdash;&mdash;&mdash;-ndk-build 编译&mdash;&mdash;&mdash;&mdash;&mdash;&ndash;</p>

<p>:~/workspace/Sayok/jni$ ndk-build
Compile thumb  : ok &lt;= ok.c
SharedLibrary  : libok.so
Install        : libok.so =&gt; libs/armeabi/libok.so</p>

<p>出现了 libs/armeabi/libok.so</p>

<p><img class="alignnone" src="http://pic.qndown.com/img/common/8538924c/" alt="" width="142" height="137" /></p>

<p>&nbsp;</p>

<p>3）run 就可以了</p>

<p><img title="logcat" src="http://pic.qndown.com/img/common/217be66a/" alt="" width="491" height="47" /></p>

<p>&nbsp;</p>

<p><img title="效果" src="http://pic.qndown.com/img/common/116cfe3f/" alt="" width="244" height="419" /> 效果</p>

<p>&nbsp;</p>

<hr />

<p>MORE:</p>

<p>1)project file<a title="Sayok" href=" http://filemarkets.com/file/common/81252e98/" target="_blank">【Sayok20120902.tar.gz】</a>
<a href="http://filemarkets.com/file/common/81252e98/">http://filemarkets.com/file/common/81252e98/</a></p>

<p>MD5：efa15676d843b4d21edac12b5c035c02</p>

<p>2)</p>

<p>/home/用户名/android-ndk-r8b/docs</p>

<p>/home/用户名/android-ndk-r8b/samples</p>

<p><a href="http://www.ibm.com/developerworks/cn/opensource/tutorials/os-androidndk/index.html">http://www.ibm.com/developerworks/cn/opensource/tutorials/os-androidndk/index.html</a></p>

<p><a href="http://blog.devdiv.com/android-jni%E5%85%A5%E9%97%A8%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B.html">http://blog.devdiv.com/android-jni%E5%85%A5%E9%97%A8%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B.html</a></p>

<p><a href="http://www.cnblogs.com/shadox/archive/2011/12/02/2272564.html">http://www.cnblogs.com/shadox/archive/2011/12/02/2272564.html</a></p>

<p>&nbsp;</p>

<p>&nbsp;</p>
]]></content>
  </entry>
  
</feed>
